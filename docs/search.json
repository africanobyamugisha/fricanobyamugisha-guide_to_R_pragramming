[{"path":"index.html","id":"section","chapter":"*","heading":"*","text":"","code":""},{"path":"about-the-author.html","id":"about-the-author","chapter":"About the Author","heading":"About the Author","text":"Hello, Africano BYAMUGISHA\nResearch, Data & BI Analyst | R Shiny Dev | passionate data science researchI Passionate Research Data Analytics, appreciated radical shift increased reliance data making business decisions strongly believe Building mission-critical, data-driven systems can answer demanding questions powering businesses.\ncontinuously developing career data science & proficient R programming,Power BI, SQL, data Analysis Framework high ability adapt plus great deal flexibility.Lets Connect Kampala, Uganda +256 (0) 706107619 https://github.com/africanobyamugisha https://twitter.com/africano1012 byamugishafricano@gmail.com https://www.linkedin.com//africanobyamugisha https://africanobyamugisha.github.io/","code":""},{"path":"about-this-guide.html","id":"about-this-guide","chapter":"About this guide","heading":"About this guide","text":"Comprehensive guide R pragramming, Exercises Quizes end sectionWelcome comprehensive guide using R!guide designed give path start using R data Analysis, eye towards eventually using R advanced analysis data science tasks. ’ll cover broad range topics, basic data manipulation advanced machine learning techniques.guide, updated continously new content RThe topics include :-Getting StartedOperatorsData StructuresWorking DataData WranglingData VisualizationStatistical ModelingInteractive Reporting R ShinyR Markdown QuartoWeb ScrapingText MiningMachine Learning\nRegression\nClassification\nClustering\nAssociation\nAnomaly Detection\nSequence Minin\nReccomder Algorithms\nRegressionClassificationClusteringAssociationAnomaly DetectionSequence MininReccomder AlgorithmsCase StudiesAdditional ResourcesGetting Started\ndive using R, let’s get set necessary software tools. section cover downloading installing R, well integrated development environment (IDE) RStudio. ’ll also cover basics working R console executing code.Operators\nR wide range operators performing mathematical logical operations. section, ’ll cover arithmetic operators, logical operators, comparison operators, .Data Structures\nR several built-data structures, including vectors, matrices, arrays, data frames, lists. section, ’ll cover data structure detail show create, manipulate, subset .Working Data\ndata loaded R, ’ll need know manipulate extract meaningful insights. section covers data manipulation techniques filtering, sorting, aggregating data.Data Visualization\nR wide range data visualization tools, including base graphics, ggplot2, . section, ’ll cover create basic advanced visualizations help better understand data.Statistical Modeling\nR powerful tool statistical modeling, wide range built-functions packages regression, time series analysis, . section, ’ll cover commonly used statistical modeling techniques R.Interactive Reporting R Shiny\nR Shiny web application framework creating interactive reporting dashboards. section, ’ll cover create deploy simple Shiny app.R Markdown Quarto\nR Markdown Quarto powerful tools creating dynamic reports documents can easily shared updated. section, ’ll cover basics using R Markdown Quarto create interactive customizable reports.Web Scraping\nWeb scraping process extracting data websites. section, ’ll cover use R scrape data web, including handle dynamic websites parse data HTML XML.Text Mining\nText mining process analyzing extracting information large volumes text data. section, ’ll cover use R forRegression\nRegression analysis statistical method used determine relationship dependent variable one independent variables. machine learning, regression used predict continuous numerical output based set input features.Classification\nClassification type supervised learning algorithm trained predict category class given input based set labeled training data. Common classification problems include image recognition, sentiment analysis, spam filtering.Clustering\nClustering unsupervised learning method involves grouping similar data points together based features. can used identify patterns data segment data distinct groups.Association\nAssociation rule mining type unsupervised learning algorithm used identify patterns associations items dataset. often used market basket analysis identify frequently occurring combinations products.Anomaly Detection\nAnomaly detection method used identify data points deviate expected patterns trends dataset. can used fraud detection, system monitoring, applications identifying unusual data points important.","code":""},{"path":"introduction.html","id":"introduction","chapter":"1 Introduction","heading":"1 Introduction","text":"R hot. Whether measured 6,500+ add-packages, 2,000,000+ users 100,000+ R Meetup groups currently existence, can little doubt interest R statistics language, especially data analysis,\nsoaring.section, ’ll explore R , ’s popular data science community, need get started R.","code":""},{"path":"introduction.html","id":"what-is-r","chapter":"1 Introduction","heading":"1.1 What is R?","text":"R programming language widely used data analysis, statistics, data science. developed Ross Ihaka Robert Gentleman 1995, now maintained R Development Core Team.\nR free open-source programming language widely used statistical computing graphics. provides wide range statistical graphical techniques, large community users contribute packages tools extend functionality. R can used data analysis, machine learning, statistical modeling, visualization, .","code":""},{"path":"introduction.html","id":"why-r","chapter":"1 Introduction","heading":"1.2 Why R?","text":"R popular choice among data scientists statisticians several reasons.\nFirst, ’s free open-source, anyone can download use without cost.\nSecond, large active community, means many resources tools available learning using R.\n“lot prepackaged stuff ’s already available, ’re standing shoulders giants,”\nThird, R highly flexible customizable, allowing users create functions packages extend functionality.\nFinally, R wide range packages available data analysis, machine learning, visualization, making versatile tool data science projects.","code":""},{"path":"introduction.html","id":"pre-requisites","chapter":"1 Introduction","heading":"1.3 Pre requisites","text":"get started R, need things:need desktop laptop.\nNote: runs Windows, OS X “wide variety Unix platforms,” yet\nAndroid iOS.internet Connection download softwares packages, though dont need always connected.importantly willingness consistent learning.\n** Consistency Power BRAIN **\n. . . ready start working R“Despite best efforts always ” make errors, notes. “problem often use tools practices make difficult find correct mistakes.”","code":""},{"path":"introduction.html","id":"why-not-r","chapter":"1 Introduction","heading":"1.4 Why NOT R?","text":"Well, R can appear daunting first. ’s often R syntax different many languages, necessarily ’s difficult others.“written software professionally perhaps dozen programming languages, hardest language learn R,”\nwrites consultant John D. Cook  Web post R programming coming languages“language actually fairly simple, unconventional.”","code":""},{"path":"getting-started-setting-up.html","id":"getting-started-setting-up","chapter":"2 Getting Started & Setting Up","heading":"2 Getting Started & Setting Up","text":"dive using R, let’s get set necessary software tools. section cover downloading installing R, well integrated development environment (IDE) RStudio. ’ll also cover basics working R console executing code.","code":""},{"path":"getting-started-setting-up.html","id":"installing-r","chapter":"2 Getting Started & Setting Up","heading":"2.1 Installing R","text":"download R, go CRAN (Comprehensive R Archive Network) websiteCRAN WebsiteChoose download R either Linux, Mac Windows following corresponding links shown Fig 1, depending Operating System Laptop Desktop.version R download called (base) binary. Download run install R. may see mentions 64-bit 32-bit versions R; modern computer (case means computer 2010 later), go 64-bit version.","code":""},{"path":"getting-started-setting-up.html","id":"installing-r-studio","chapter":"2 Getting Started & Setting Up","heading":"2.2 Installing R Studio","text":"now installed R programming language. Working easier IDE (Integrated Development Environment), allows easily write, run debug code.book written use RStudio IDE, 99.9 % work equally well IDE’s, like Emacs ESS Jupyter notebooks.R Studio IDE got useful features ’d expect coding platform, syntax highlighting tab suggested code auto-completion. also like four-pane workspace, better manages multiple R windows typing commands, storing scripts, viewing command histories, viewing visualizations .download RStudio, go RStudio download page. Click link download installer operating system, run .","code":""},{"path":"getting-started-setting-up.html","id":"exploring-r-studio-interface","chapter":"2 Getting Started & Setting Up","heading":"2.3 Exploring R Studio Interface","text":"launch RStudio, see three four panels: launch RStudio opening file R code, Script panel appear, otherwise won’t. Don’t worry don’t see point - ’ll learn open soon enough.top left window ’ll probably work. ’s R code editor (Script) allowing create file multiple lines R code — open existing file — run entire file portions .top left window ’ll probably work. ’s R code editor (Script) allowing create file multiple lines R code — open existing file — run entire file portions .Bottom left interactive console can type R statements one line time. lines code run editor window also appear console.Bottom left interactive console can type R statements one line time. lines code run editor window also appear console.top right window shows workspace, includes list objects currently memory. ’s also history tab list prior commands; ’s handy can select one, lines code one click send either console whatever file active code editor.top right window shows workspace, includes list objects currently memory. ’s also history tab list prior commands; ’s handy can select one, lines code one click send either console whatever file active code editor.window bottom right shows plot ’ve created data visualization R code. ’s history previous plots option export plot image file PDF. window also shows external packages (R extensions) available system, files working directory help files called console.window bottom right shows plot ’ve created data visualization R code. ’s history previous plots option export plot image file PDF. window also shows external packages (R extensions) available system, files working directory help files called console.","code":""},{"path":"getting-started-setting-up.html","id":"basic-things-to-know","chapter":"2 Getting Started & Setting Up","heading":"2.4 Basic things to know","text":"","code":""},{"path":"getting-started-setting-up.html","id":"installing-packages","chapter":"2 Getting Started & Setting Up","heading":"2.4.1 Installing Packages","text":"R comes ton functions, course cover possible things may want data. ’s packages come . Packages collection functions, datasets documentation/help add new features R.want apply obscure statistical test data? Plot data map? Run C++ code R? Speed part data handling process? R packages .fact, 100,000 packages, R packages just anything possibly want . packages contributed R community.R packages available CRAN, official R repository - network servers (mirrors). Packages CRAN checked published, make sure supposed don’t contain malicious components. Downloading packages CRAN therefore generally considered safe.rest guide, ’ll make use package called tidyverse, gives additional features fro data Wrangling. install package CRAN, can either select Packages > Install RStudio bottom right pane write tidyverse text box pop-window appears, use following line code console script:R downloads installs packages, number technical messages printed Console pane (example messages), systems,installation fails reason, usually error message. can read troubleshooting errors also list common problems installing packages available RStudio support page https://support.rstudio.com/hc/en-us/articles/200554786-Problem-Installing-Packages.","code":"\ninstall.packages(\"tidyverse\")* DONE (ggplot2)package ‘ggplot2’ successfully unpacked and MD5 sums checked"},{"path":"getting-started-setting-up.html","id":"loading-packages","chapter":"2 Getting Started & Setting Up","heading":"2.4.2 Loading Packages","text":"’ve installed package, ’re still finished quite yet. package may installed, functions datasets won’t available load . something need time start new R session. Luckily, done single short line code using library function.","code":"\nlibrary(\"tidyverse\")"},{"path":"getting-started-setting-up.html","id":"working-directory","chapter":"2 Getting Started & Setting Up","heading":"2.4.3 Working Directory","text":"working directory folder computer R reads saves files. recommend always set working directory working R.can set working directory using setwd(). Specify path folder inside parentheses forward slanting slashes.Note slashes always forward slashes, even Windows\nsystem. Windows, command might\nlook something like:current working directory can checked using","code":"\nsetwd(\"C/users/desktop/R Practice\")\ngetwd()"},{"path":"getting-started-setting-up.html","id":"getting-help","chapter":"2 Getting Started & Setting Up","heading":"2.4.4 Getting Help","text":"One important features need start path becoming R user getting help. matter skilled programmer , always encounter new functions need help understanding use . take time explore help features R.help() FunctionTo get online help within R session use help() function. allow us see documentation function interested .Lets say example wish make sequence. may read blog post online website can function called seq(). Unfortunately us people really display use functions list. fear! R help:Many times know exactly function can use. order ask R help case can actually search packages keyword phrase.example wanted know math symbols type following:Enter searches RStudio see get.example() FunctionMany times just need see examples rather read entire documentation function command. situation use example() functionWe can see numerous examples R run us. benefit command comes interested seeing examples graphics, just seeing command final product may intuitive usConsider might interested perspective plots. enter RStudio see beautiful graphics R can :help.search() functionhelp.search() search sources documentation return match search string. ?? shortcut help.search() returns information.Internet HelpAside areas help another method search internet help. resources:Comprehensive R Archive NetworkThe Comprehensive R Archive NetworkUCLA Statistical Computing Help SiteUCLA Statistical Computing Help SiteGithubGithubR BloggersR BloggersRStudio CommunityRStudio CommunityStack OverflowStack Overflowr4ds Communityr4ds CommunityAnd many moreAnd many ","code":"{r eval=FALSE}\nhelp(seq)\nhelp(\"<\")\nhelp(\"<\")\n`?`(\"<\")\n`?`(\"<\")\n`?`(\"for\")\nexample(seq)\nexample(persp)\nhelp.search(\"regression\")\n`?`(`?`(regression))"},{"path":"getting-started-setting-up.html","id":"keyboard-shortcuts","chapter":"2 Getting Started & Setting Up","heading":"2.4.5 Keyboard ShortCuts","text":"Knowing RStudio keyboard shortcuts save lots time programming. RStudio provides dozens useful shortcuts can access menu top: Tools > Keyboard Shortcuts Help. favourites :-Tab generic auto-complete function. start typing console editor hit tab key, RStudio suggest functions file names; simply select one want hit either tab enter accept .Tab generic auto-complete function. start typing console editor hit tab key, RStudio suggest functions file names; simply select one want hit either tab enter accept .Control + arrow (command + arrow Mac) similar autocomplete tool. Start typing hit key combination, shows list every command ’ve typed starting keys. Select one want hit return/enter. works interactive console, code editor window.Control + arrow (command + arrow Mac) similar autocomplete tool. Start typing hit key combination, shows list every command ’ve typed starting keys. Select one want hit return/enter. works interactive console, code editor window.Control + enter (command + enter Mac) takes current line code editor, sends console executes . select multiple lines code editor hit ctrl/cmd + enter, run.Control + enter (command + enter Mac) takes current line code editor, sends console executes . select multiple lines code editor hit ctrl/cmd + enter, run.Insert <- assignment operator Option + - Mac, Alt + - Windows.Insert <- assignment operator Option + - Mac, Alt + - Windows.Insert pipe operator %>% Command + Shift + M Mac, Ctrl + Shift + M Windows.Insert pipe operator %>% Command + Shift + M Mac, Ctrl + Shift + M Windows.Run lines code Command + + Enter Mac Control + + Enter Windows.Run lines code Command + + Enter Mac Control + + Enter Windows.Restart current R session start fresh Command + Shift + F10 Mac Control + Shift + F10 Windows.Restart current R session start fresh Command + Shift + F10 Mac Control + Shift + F10 Windows.Comment uncomment lines Command + Shift + C Mac Control + Shift + C Windows.Comment uncomment lines Command + Shift + C Mac Control + Shift + C Windows.RStudio features, including full list keyboard shortcuts, head online documentation.","code":""},{"path":"getting-started-setting-up.html","id":"r-files-objects","chapter":"2 Getting Started & Setting Up","heading":"2.5 R files & Objects","text":"","code":""},{"path":"getting-started-setting-up.html","id":"rstudio-projects","chapter":"2 Getting Started & Setting Up","heading":"2.5.1 RStudio Projects","text":"RStudio offers powerful feature keep organized; Projects. important stay organized work multiple analyses. Projects RStudio allow keep important work one place, including code scripts, plots, figures, results, datasets.Create new project navigating File tab RStudio select New Project.... specify like create project new directory, existing directory. select New Directory: RStudio offers dedicated project types working R package, Shiny Web Application., bookdown, blogdown etc select New Project, creates R project:Next, give project name. Create project subdirectory showing folder live computer. approve location select Create Project, , select “Browse” choose location computer project folder live.RStudio Projects useful need share work colleagues. can send project file (ending .Rproj) along supporting files, make easier colleagues recreate working environment reproduce results.","code":""},{"path":"getting-started-setting-up.html","id":"save-your-real-work.-delete-the-rest.","chapter":"2 Getting Started & Setting Up","heading":"2.5.2 Save Your “Real” Work. Delete the Rest.","text":"Practice good housekeeping avoid unforeseen challenges road. create R object worth saving, capture R code generated object R script file. Save R script, don’t save environment, workspace, object created.prevent RStudio saving workspace, open Preferences > General un-select option restore .RData workspace startup. sure specify never want save workspace, like :Now, time open RStudio, begin empty session. None code generated previous sessions remembered. R script datasets can used recreate environment scratch.experts agree saving workspace best practice using RStudio.","code":""},{"path":"getting-started-setting-up.html","id":"r-scripts","chapter":"2 Getting Started & Setting Up","heading":"2.5.3 R Scripts","text":"can write simple one time code Console, projects become complex, write longer blocks code. want save work, necessary organize code script. allows us keep track work project, write clean code plenty notes, reproduce work, share others.RStudio, can write scripts text editor window top left interface:create new script, can use commands file menu, file > New file > New Script Orwe can also use keyboard shortcut Ctrl + Shift + N.save script, file extension .R.","code":""},{"path":"getting-started-setting-up.html","id":"task-1.1","chapter":"2 Getting Started & Setting Up","heading":"2.6 Task 1.1:","text":"don’t computer, follow instructions install .don’t computer, follow instructions install .don’t R Studio Computer, Download Install .don’t R Studio Computer, Download Install .Explore Tour PanesExplore Tour PanesInstall packages, can start :-\nreadr, data import.\nggplot2, data visualization.\ndplyr, data manipulation.\ntidyr, data tidying.\npurrr, functional programming.\ntibble, tibbles, modern re-imagining dataframes.\nstringr, string manipulation.\nInstall packages, can start :-readr, data import.readr, data import.ggplot2, data visualization.ggplot2, data visualization.dplyr, data manipulation.dplyr, data manipulation.tidyr, data tidying.tidyr, data tidying.purrr, functional programming.purrr, functional programming.tibble, tibbles, modern re-imagining dataframes.tibble, tibbles, modern re-imagining dataframes.stringr, string manipulation.stringr, string manipulation.Load packages choice, using library()Load packages choice, using library()Identify loaded packages using searchIdentify loaded packages using searchCreate new Project, new Script project\nCreate new Project, new Script project","code":""},{"path":"operators-data-objects.html","id":"operators-data-objects","chapter":"3 Operators & Data Objects","heading":"3 Operators & Data Objects","text":"","code":""},{"path":"operators-data-objects.html","id":"operators","chapter":"3 Operators & Data Objects","heading":"3.1 Operators","text":"R wide range operators performing mathematical logical operations.\nsection, ’ll cover arithmetic operators, logical operators, comparison operators, .","code":""},{"path":"operators-data-objects.html","id":"assignment-operators","chapter":"3 Operators & Data Objects","heading":"3.1.1 Assignment Operators","text":"Assignment operators used assigning values various data objects R.\nobjects may integers, vectors, functions.\nvalues stored assigned variable names.\ntwo kinds assignment operators: Left RightLeft Assignment (\\<- <<- =)Right Assignment (-> ->>)operators <- = can used, almost interchangeably, assign variable environment.<<- operator used assigning variables parent environments (like global assignments).<<- ->>global assigner.Normally, create variable inside function, variable local, can used inside function.create global variable inside function, can use global assignment operator.Additionally, use global assignment operator want change global variable inside function.However, don’t worry much function global variable, learn preceding chapters.","code":"\nmy_var <- 3\nmy_var <<- 3\n3 -> my_var\nmy_var <<- 3\nmy_var  # print my_var\nmy_function <- function() {\n    txt <<- \"fantastic\"\n    paste(\"R is\", txt)\n}\nmy_function()\nprint(txt)\ntxt <- \"awesome\"\nmy_function <- function() {\n    txt <<- \"fantastic\"\n    paste(\"R is\", txt)\n}\nmy_function()\npaste(\"R is\", txt)"},{"path":"operators-data-objects.html","id":"arithmetic-operators","chapter":"3 Operators & Data Objects","heading":"3.1.2 Arithmetic Operators","text":"Arithmetic operators used numeric values perform common mathematical operations:","code":"\na <- 10\nb <- 4\nprint(a + b)\nprint(a - b)\nprint(a * b)\nprint(a/b)\nprint(a^b)\nprint(a%/%b)"},{"path":"operators-data-objects.html","id":"relational-operators","chapter":"3 Operators & Data Objects","heading":"3.1.3 Relational Operators","text":"used comparisons values.element first value compared corresponding element second value.result comparison Boolean value (TRUE/FALSE)","code":"\n3 > 5\n5 == 4\n4 != 6\na <- \"big\"\nb <- \"small\"\na == b"},{"path":"operators-data-objects.html","id":"logical-operators","chapter":"3 Operators & Data Objects","heading":"3.1.4 Logical Operators","text":"applicable vectors type logical, numeric complex.\nnumbers greater 1 considered logical value TRUE.element first vector compared corresponding element second vector.\nresult comparison Boolean value.Logical operators used combine conditional statements:","code":""},{"path":"operators-data-objects.html","id":"miscellaneous-operators","chapter":"3 Operators & Data Objects","heading":"3.1.5 Miscellaneous Operators","text":"","code":"\nx <- 1:10\nx %in% y\nx <- Matrix1 %*% Matrix2"},{"path":"operators-data-objects.html","id":"data-objects","chapter":"3 Operators & Data Objects","heading":"3.2 Data Objects","text":"almost everything R concept everything R object.Generally, programming, need use variables store various information.\nVariables reserved memory locations store values .e create variable allocate memory space.\nR variable object.\nobject data structure attributes methods applied attributes.","code":""},{"path":"operators-data-objects.html","id":"data-types","chapter":"3 Operators & Data Objects","heading":"3.2.1 Data Types","text":"CharacterA character object represented collection Alphabets,numbers symbols double quotes (\" \").NumericNumeric used represent continuous variables.\nE.g. Time taken athletes completing single lap race.IntegerIntegers natural numbers.\ncan used represent counting variablesComplexTo represent complex numbers object type complex used.\ncreating object type complex use .complex() complex functions.LogicalAn object data type logical can value TRUE FALSE used indicate condition true false.","code":"\nmy_name <- \"Africano\"\nas.character()  # convert to character\na <- 20.4\na <- as.numeric(20)  # convert to numeric\na <- 20\na <- as.integer(20.345)  # convert to integer\nas.complex(35 + (0+7i))  # convert to complex number\ncomplex(real = 2, im = 1)\nas.logical()  # convert to logical"},{"path":"operators-data-objects.html","id":"data-structures","chapter":"3 Operators & Data Objects","heading":"3.2.2 Data Structures","text":"VectorsUsed store objects type (think arrays)\nVector can constructed using c()ListsA list like vector.However, element list can object type structure.\nConsequently, list can contain another list therefore can used construct arbitrary data structures.list can also constructed using function list()FactorsThe factor data type used represent categorical data.factor variables mostly possible values seen.\nvalues called LEVELS.example: variable ‘Gender’ values male female.variable just two levels called Dichotomous.Matrices\nmatrix can regarded generalization vector.\nelements matrix must data type..e.\nmulti dimensional vector, follow matrix algebraic operators propertiesData Frames\nData frames can also regarded extension matrices.Data frames can columns different data types convenient data structure data analysis R.\nfact, statistical modeling routines R require data frame input.Data frame can created using data.frame()","code":"\nvector()  #declares an empty vector\na <- c(11, 25, 15.43, -0.6, -2, 4)  #numeric vector\nb <- c(TRUE, T, FALSE, F)  # logical vector\nc <- c(\"name\", \"x\", \"y\")  #character vector\na[1]  #accessing the first element in vector a\nb[1:4]  #accessing elements from 1st to 4th\nid <- 1:4\nmonth <- month.name\nr <- seq(2, 3, 0.1)\nmy_list <- list(id, month, r)\nprint(my_list)\n# accessing elements in a list\nmy_list[[1]]\nmy_list[[2]]\ngender <- c(\"male\", \"male\", \"female\", \"male\", \"female\")\ngender <- as.factor(gender)\nlevels(Gender)  # We can look at levels\nsatisfaction <- as.factor(c(\"Extremely poor\", \"bad\", \"moderate\",\n    \"good\", \"Extremely good\", \"Extremely poor\", \"good\", \"moderate\"))\nlevels(satisfaction)\nmat1 <- matrix(nrow = 3, ncol = 3)  # creating a 3 x 3 empty matrix\nSkill <- c(\"R\", \"SQL\", \"Excel\")\nExpert <- c(\"Africano\", \"Byamugisha\", \"Analyst 1\")\ndf <- data.frame(Skill, Expert)\ndf"},{"path":"operators-data-objects.html","id":"mixing-objects","chapter":"3 Operators & Data Objects","heading":"3.2.3 Mixing Objects","text":"brings coercion.\nCoercion happens R type objects changed computation either implicitly using functions explicit coercionNotice first, x type integer.\nassigned x[2] = \"hi\", elements x coerced character vectors R can hold data single type.Implicit Coercion\nCoercion happens data types R, often implicitly, data can accommodate values, done R knowledge programmer.Explicit Coercion\nexplicit coercion , use can change one data type another data type applying function programmer.","code":"\nx <- 1:3\ntypeof(x)\nx[2] <- \"hi\"\ntypeof(x)\n# Examples of conversions\nas.integer()  # Converts the object to integer type\nas.character()\nas.factor()\nas.data.frame()\nas.numeric()"},{"path":"operators-data-objects.html","id":"object-attributes","chapter":"3 Operators & Data Objects","heading":"3.2.4 Object Attributes","text":"metadata describes data objectnames, dimnamesnames, dimnamesdimensions (e.g. matrices, arrays)dimensions (e.g. matrices, arrays)class (e.g. integer, numeric)class (e.g. integer, numeric)lengthlength","code":"\nclass()\ndimnames()\nnames()\nlength()\ntypeof()"},{"path":"operators-data-objects.html","id":"task-2.1","chapter":"3 Operators & Data Objects","heading":"3.3 Task 2.1:","text":"Can spot difference character string number? test: character strings numbers? 1, \"1\", \"one\".Create atomic vector Character type, double type, logical type , integer type, complex type raw typeCheck whether created data structure vector type well check class data.Create List heterogeneous data, include numeric, character logical vectors print lists.Create matrix 3 rows 4 columns stores data 1 12 arrange value row wise.Create Data Frame 5 employees .","code":""},{"path":"working-with-data.html","id":"working-with-data","chapter":"4 Working With Data","heading":"4 Working With Data","text":"can download demo data files fro various types link :-CLICK open datasets folder","code":""},{"path":"working-with-data.html","id":"importing-data-into-r","chapter":"4 Working With Data","heading":"4.1 Importing Data into R","text":"","code":""},{"path":"working-with-data.html","id":"import-flat-files-.csv-.txt","chapter":"4 Working With Data","heading":"4.1.1 Import flat files (.csv, .txt )","text":"read.table() main functionread.table() main functionread.csv() wrapper CSVread.csv() wrapper CSVread.delim() wrapper tab-delimited filesread.delim() wrapper tab-delimited files","code":"\n# install th read r package\ninstall.packages(readr)\n# load the read r package\nlibrary(readr)\n# read csv file using read.table()\ndf1 <- read_csv(\"data/demo csv data.csv\", show_col_types = FALSE)\n# read txt file that doesnot headers\ndf2 <- read_delim(\"data/demo data text.txt\")\n# Or use\ndf3 <- read_tsv(\"data/demo data text.txt\")"},{"path":"working-with-data.html","id":"import-excel-data-file","chapter":"4 Working With Data","heading":"4.1.2 Import Excel data file","text":"","code":"\n# install package\ninstall.packages(\"readxl\")\n# load package\nlibrary(readxl)\n# by default, it loads the first sheet\nexcel_data <- read_excel(\"data/demo excel data.xlsx\")\n# if the excell workbook has many sheets and you want to\n# load a specific one, e,g, sheet two\nexcel_data <- read_excel(\"data/demo excel data.xlsx\", sheet = 2)"},{"path":"working-with-data.html","id":"import-stata-data-file","chapter":"4 Working With Data","heading":"4.1.3 Import STATA data file","text":"","code":"\ninstall.packages(\"readstata13\")\nlibrary(readstata13)\nstata_data <- read.dta13(\"data/demo stata data.dta\", generate.factors = TRUE)"},{"path":"working-with-data.html","id":"importing-r-data-file","chapter":"4 Working With Data","heading":"4.1.4 Importing R data file","text":"","code":"\nload(\"data/demo R data.rda\")"},{"path":"working-with-data.html","id":"importing-web-data-file","chapter":"4 Working With Data","heading":"4.1.5 Importing Web data file","text":"Data web comes several modes, example:files can downloadfiles can downloadAPIsAPIscontent HTML tablescontent HTML tablescustom data browserscustom data browsersand ..However, section, let us keep basic, interested option, contact author materials code might book.","code":""},{"path":"working-with-data.html","id":"inbuilt-datasets","chapter":"4 Working With Data","heading":"4.1.6 Inbuilt Datasets","text":"see list pre-loaded datasets, type function data()case want get list datasets specific R package using data()","code":"\n# Loading\ndata(mtcars)\n# learn more about the data\n`?`(mtcars)\n# OR\nhelp(mtcars)\n# list available datasets in ggplot2 package\ndata(package = \"ggplot2\")"},{"path":"working-with-data.html","id":"other-file-formats","chapter":"4 Working With Data","heading":"4.1.7 Other file formats","text":"dbConnect()dbConnect()dbGetQuery()dbGetQuery()","code":""},{"path":"working-with-data.html","id":"explore-the-dataset","chapter":"4 Working With Data","heading":"4.2 Explore the dataset","text":"R,various functions explore data frame.\nfunctions can help get better understanding structure contents data frame.common functions.head() - shows first rows data frametail() - shows last rows data framestr() - displays structure data framesummary() - provides summary statistics variable data framenrow() - returns number rows data framencol() - returns number columns data framecolnames() - returns names columns data framerow.names() - returns names rows data frameunique() - returns unique values column data frameunique() - returns unique values column data frameview() - shows dataset spreadsheet formview() - shows dataset spreadsheet formdim() - returns dimensions data frame vector two integers, number rows number columnsdim() - returns dimensions data frame vector two integers, number rows number columnsis.na() - returns logical vector indicating whether value data frame missing notis.na() - returns logical vector indicating whether value data frame missing notFor better visual display results, additional packages can used skimr, gtsummary, kable, preceding sections guide, however, sneak peak basic ones.","code":"\ninstall.packages(\"skimr\")\nlibrary(skimr)\n# get the summary of all the variable, alternative to\n# ---str()---\nskim(iris)"},{"path":"working-with-data.html","id":"pull-basic-statistics-from-your-data","chapter":"4 Working With Data","heading":"4.3 Pull basic statistics from your data","text":"","code":""},{"path":"working-with-data.html","id":"for-continuous-variables","chapter":"4 Working With Data","heading":"4.3.1 For continuous variables:","text":"mean() - calculates mean numeric vectormedian() - calculates median numeric vectorsd() - calculates standard deviation numeric vectorvar() - calculates variance numeric vectormin() - returns minimum value numeric vectormax() - returns maximum value numeric vectorrange() - returns range numeric vector vector length 2 containing minimum maximum valuesquantile() - calculates quantiles numeric vectorsummary() - provides summary statistics numeric vector, including minimum, 1st quartile, median, mean, 3rd quartile, maximumsummary() - provides summary statistics numeric vector, including minimum, 1st quartile, median, mean, 3rd quartile, maximumSimple plots using base packageSimple plots using base packageFor categorical/character variables:table() - creates contingency table frequencies levels categorical variableprop.table() - converts contingency table frequencies contingency table proportionssummary() - provides summary factor variable, including number levels frequency common level.summary() - provides summary factor variable, including number levels frequency common level.Simple plot using base packageSimple plot using base package","code":"\nmean(numeric_vector)\nmedian(numeric_vector)\nsd(numeric_vector)\n# Histogram:\nhist(data$variable_name)\n# Boxplot:\nboxplot(data$variable_name)\n# Density Plot:\nplot(density(data$variable_name))\n# Scatterplot:\nplot(data$variable_name1, data$variable_name2)\n# Bar Plot:\nbarplot(table(data$variable_name))\n# Pie Chart:\npie(table(data$variable_name))\n# Stacked Bar Plot:\nbarplot(table(data$variable_name, data$grouping_variable), col = c(\"red\",\n    \"blue\"))"},{"path":"working-with-data.html","id":"exporting-data-from-r","chapter":"4 Working With Data","heading":"4.4 Exporting Data from R","text":"can download demo data files fro various types link :-CLICK open datasets folder","code":"\nsave(data_object, file = \"my_data.rda\")  # exporting R data object\nwrite.csv(data_object, file = \"my_data.csv\")  # exporting csv data file\nwrite.table(data_object, file = \"my_data.txt\")  # exporting text data file\nwritexl::write_xlsx(data_object, file = \"my_data.rda\")  # exporting excel data file\njsonlite::write_json(data_object, file = \"my_data.json\")  # exporting java script data file\nxml2::write_xml(data_object, file = \"my_data.xml\")  # exporting to xml file\nhaven::write_sas(data_object, file = \"my_data.xport\")  # exporting SAS data file\nhaven::write_dta(data_object, file = \"my_data.dta\")  # exporting STATA data file\nhaven::write_sav(data_object, file = \"my_data.sav\")  # exporting SPSS data file"},{"path":"working-with-data.html","id":"task-3.1","chapter":"4 Working With Data","heading":"4.5 Task 3.1:","text":"Import CSV file named “sales_data.csv” RStudio.\nNOTE: can download sales data computer ; Click Download Sales DataImport CSV file named “sales_data.csv” RStudio.NOTE: can download sales data computer ; Click Download Sales DataExport data “sales_data” object CSV file named “sales_data_export.csv”.Export data “sales_data” object CSV file named “sales_data_export.csv”.Using “summary” function, extract basic statistics (mean, median, minimum, maximum) “sales_data” object.Using “summary” function, extract basic statistics (mean, median, minimum, maximum) “sales_data” object.Load new data file named “customer_data.xlsx” RStudio.Load new data file named “customer_data.xlsx” RStudio.Explore data using “head” “tail” functions view first last rows data.Explore data using “head” “tail” functions view first last rows data.Use “str” function display structure “customer_data” object.Use “str” function display structure “customer_data” object.Pull basic statistics (mean, median, minimum, maximum) “customer_data” object using “summary” function.Pull basic statistics (mean, median, minimum, maximum) “customer_data” object using “summary” function.Export data “customer_data” object CSV file named “customer_data_export.csv”.Export data “customer_data” object CSV file named “customer_data_export.csv”.","code":""},{"path":"working-with-data.html","id":"task-3.2","chapter":"4 Working With Data","heading":"4.6 Task 3.2:","text":"Import inbuilt data iris RStudio.Using “plot” function, create scatter plot “Sepal.Length” “Sepal.Width” columns “iris” object.Using “plot” function, create scatter plot “Sepal.Length” “Sepal.Width” columns “iris” object.Using “boxplot” function, create box plot “Petal.Length” column “iris” object, grouped “Species” column.Using “boxplot” function, create box plot “Petal.Length” column “iris” object, grouped “Species” column.Using “hist” function, create histogram “Petal.Width” column “iris” object, grouped “Species” column.Using “hist” function, create histogram “Petal.Width” column “iris” object, grouped “Species” column.Using “plot” function, create line plot “Sepal.Length” column “iris” object, grouped “Species” column.Using “plot” function, create line plot “Sepal.Length” column “iris” object, grouped “Species” column.","code":""},{"path":"data-wrangling.html","id":"data-wrangling","chapter":"5 Data Wrangling","heading":"5 Data Wrangling","text":"","code":""},{"path":"data-wrangling.html","id":"r-data-wrangling-packages","chapter":"5 Data Wrangling","heading":"5.1 R Data Wrangling Packages","text":"tons R packages help work data, ’re going cover packages functions within packages ’ll absolutely want need work working data.","code":""},{"path":"data-wrangling.html","id":"dplyr","chapter":"5 Data Wrangling","heading":"5.1.1 dplyr","text":"package specifically designed helping wrangle data. package called dplyr allow easily accomplish many data wrangling tasks necessary. Like tidyr, package core package within tidyverse, thus loaded ran library(tidyverse) earlier. cover number functions help wrangle data using dplyr:%>% - pipe operator chaining sequence operations%>% - pipe operator chaining sequence operationsglimpse() - get overview ’s included datasetglimpse() - get overview ’s included datasetfilter() - filter rowsfilter() - filter rowsselect() - select, rename, reorder columnsselect() - select, rename, reorder columnsrename() - rename columnsrename() - rename columnsarrange() - reorder rowsarrange() - reorder rowsmutate() - create new columnmutate() - create new columngroup_by() - group variablesgroup_by() - group variablessummarize() - summarize information within datasetsummarize() - summarize information within datasetleft_join() - combine data across data frameleft_join() - combine data across data frametally() - get overall sum values specified column(s) number rows tibbletally() - get overall sum values specified column(s) number rows tibblecount() - get counts unique values specified column(s) (shortcut group_by() tally())count() - get counts unique values specified column(s) (shortcut group_by() tally())add_count() - add values count() new columnadd_count() - add values count() new columnadd_tally() - add value(s) tally() new columnadd_tally() - add value(s) tally() new column","code":""},{"path":"data-wrangling.html","id":"tidyr","chapter":"5 Data Wrangling","heading":"5.1.2 tidyr","text":"also cover tidyr package. main functions ’ll cover tidyr :unite() - combine contents two columns single columnunite() - combine contents two columns single columnseparate() - separate contents column two columnsseparate() - separate contents column two columns","code":""},{"path":"data-wrangling.html","id":"janitor","chapter":"5 Data Wrangling","heading":"5.1.3 janitor","text":"third package ’ll include janitor package. core tidyverse package, tidyverse-adjacent package provides tools cleaning messy data. main functions ’ll cover janitor :clean_names() - clean names data frameclean_names() - clean names data frametabyl() - get helpful summary variabletabyl() - get helpful summary variableget_dupes() - identify duplicate observationsget_dupes() - identify duplicate observations","code":""},{"path":"data-wrangling.html","id":"skimr","chapter":"5 Data Wrangling","heading":"5.1.4 skimr","text":"final package ’ll discuss skimr package. package provides quick way summarize data.frame tibble within tidy data framework. ’ll discuss useful function :skim() - summarize data frameIf already installed packages, ’ll want sure packages installedNOTE: package package provides tools conveniently manage add-packages R programming language.executing previous code, loaded four packages.p_load function also checks whether package installed already. package installed yet, installed automatically pacman package.p_load function basically replaces Base R library, install.packages, require functions allows installing loading numerous packages simultaneously using much less R code.","code":"\ninstall.packages(\"pacman\")  # Install pacman package\nlibrary(\"pacman\")  # Load pacman package\np_load(skimr, tidyr, janitor, dplyr)"},{"path":"data-wrangling.html","id":"the-pipe-operator","chapter":"5 Data Wrangling","heading":"5.2 The Pipe Operator","text":"get important functions within dplyr, useful discuss known pipe operator.pipe operator looks like R: %>%. Whenever see pipe %>%, think word “,”.Generally, pipe operator allows chain number different functions together particular order. wanted take data frame carry function B R, depict arrow pointing B:base R syntax, carried calling function B data frame object :Alternatively, use pipe operator (%>%):However, often performing just one action data frame, rather looking carry multiple functions.Say want take data frame carry function B, want take output carry function C. Subsequently want take output carry function D.R syntax, first apply function B data frame , apply function C output, apply function D output. results following syntax hard read multiple calls functions nested within :Alternatively, use pipe operator. time want take output one function carry something new output, use pipe operator:, even readable steps indedented onto individual line code:previous two code examples provide output, one readable, large part pipes used. makes code understandable others.’ll use pipe operator lot. Remember, takes output left hand side feeds function comes pipe first argument.","code":"\nB(A)A %>% BD(C(B(A)))A %>% B %>% C %>% DA %>% \n  B %>% \n    C %>%\n      D"},{"path":"data-wrangling.html","id":"filtering-data","chapter":"5 Data Wrangling","heading":"5.3 Filtering Data","text":"working large dataset, ’re often interested working portion data one time.example, data people ages 0 100 years old, wanted ask question pertained children, likely want work data individuals less 18 years old., want filter dataset include data select individuals.Filtering can done row column.examples , ’ll using dataset ggplot2 package called msleep. (’ll learn package later course data visualization) now, ’s core tidyverse package ’s loaded along tidyverse packages using library(tidyverse).)dataset includes sleep times weights number different mammals. 83 rows, row including information different type animal, 11 variables. row different animal column includes information animal, wide dataset.get idea variables included data frame, can use glimpse(). function summarizes many rows (Observations) many columns (Variables). Additionally, gives glimpse type data contained column.Specifically, dataset, know first column name contains character vector (chr) first three entries “Cheetah,” “Owl monkey,” “Mountain beaver.” works similarly base R summary() function.Glimpse msleep dataset","code":"## take a look at the data\nlibrary(ggplot2)\nglimpse(msleep)"},{"path":"data-wrangling.html","id":"filtering-rows","chapter":"5 Data Wrangling","heading":"5.3.1 Filtering Rows","text":"interested learning sleep times “Primates,” filter dataset include data mammals also Primates. can see glimpse(), information contained within order variable. within R, use following syntax:Note ; using equality == comparison operator learned previous topic operators. Also note used pipe operator feed msleep data frame filter() function.reason urge use piping operators (%>%)! code highly readable. use pipe (%>%)!Now, smaller dataset 12 mammals (opposed original 83) can see order variable column includes “Primates.”, interested Primates sleep 10 hours total per night? information sleep_total column. Fortunately, filter() also works numeric variables.accomplish , use following syntax, separating multiple filters want apply comma:Note used “greater ” comparison operator sleep_total.Now, dataset focused 5 mammals, primates sleep 10 hours night total.can obtain result & logical operatorNote number columns hasn’t changed. 11 variables still shown columns function filter() filters rows, columns.","code":"\n# filter to only include primates\nfilter(msleep, order == \"Primates\")## # A tibble: 12 × 11\n##    name    genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴\n##    <chr>   <chr> <chr> <chr> <chr>     <dbl>   <dbl>   <dbl>\n##  1 Owl mo… Aotus omni  Prim… <NA>       17       1.8  NA    \n##  2 Grivet  Cerc… omni  Prim… lc         10       0.7  NA    \n##  3 Patas … Eryt… omni  Prim… lc         10.9     1.1  NA    \n##  4 Galago  Gala… omni  Prim… <NA>        9.8     1.1   0.55 \n##  5 Human   Homo  omni  Prim… <NA>        8       1.9   1.5  \n##  6 Mongoo… Lemur herbi Prim… vu          9.5     0.9  NA    \n##  7 Macaque Maca… omni  Prim… <NA>       10.1     1.2   0.75 \n##  8 Slow l… Nyct… carni Prim… <NA>       11      NA    NA    \n##  9 Chimpa… Pan   omni  Prim… <NA>        9.7     1.4   1.42 \n## 10 Baboon  Papio omni  Prim… <NA>        9.4     1     0.667\n## 11 Potto   Pero… omni  Prim… lc         11      NA    NA    \n## 12 Squirr… Saim… omni  Prim… <NA>        9.6     1.4  NA    \n## # … with 3 more variables: awake <dbl>, brainwt <dbl>,\n## #   bodywt <dbl>, and abbreviated variable names\n## #   ¹​conservation, ²​sleep_total, ³​sleep_rem, ⁴​sleep_cycle\n# OR\nmsleep %>%\n    filter(order == \"Primates\")## # A tibble: 12 × 11\n##    name    genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴\n##    <chr>   <chr> <chr> <chr> <chr>     <dbl>   <dbl>   <dbl>\n##  1 Owl mo… Aotus omni  Prim… <NA>       17       1.8  NA    \n##  2 Grivet  Cerc… omni  Prim… lc         10       0.7  NA    \n##  3 Patas … Eryt… omni  Prim… lc         10.9     1.1  NA    \n##  4 Galago  Gala… omni  Prim… <NA>        9.8     1.1   0.55 \n##  5 Human   Homo  omni  Prim… <NA>        8       1.9   1.5  \n##  6 Mongoo… Lemur herbi Prim… vu          9.5     0.9  NA    \n##  7 Macaque Maca… omni  Prim… <NA>       10.1     1.2   0.75 \n##  8 Slow l… Nyct… carni Prim… <NA>       11      NA    NA    \n##  9 Chimpa… Pan   omni  Prim… <NA>        9.7     1.4   1.42 \n## 10 Baboon  Papio omni  Prim… <NA>        9.4     1     0.667\n## 11 Potto   Pero… omni  Prim… lc         11      NA    NA    \n## 12 Squirr… Saim… omni  Prim… <NA>        9.6     1.4  NA    \n## # … with 3 more variables: awake <dbl>, brainwt <dbl>,\n## #   bodywt <dbl>, and abbreviated variable names\n## #   ¹​conservation, ²​sleep_total, ³​sleep_rem, ⁴​sleep_cyclemsleep %>%\n  filter(order == \"Primates\" & sleep_total > 10)\nmsleep %>%\n    filter(order == \"Primates\" & sleep_total > 10)## # A tibble: 5 × 11\n##   name     genus vore  order conse…¹ sleep…² sleep…³ sleep…⁴\n##   <chr>    <chr> <chr> <chr> <chr>     <dbl>   <dbl>   <dbl>\n## 1 Owl mon… Aotus omni  Prim… <NA>       17       1.8   NA   \n## 2 Patas m… Eryt… omni  Prim… lc         10.9     1.1   NA   \n## 3 Macaque  Maca… omni  Prim… <NA>       10.1     1.2    0.75\n## 4 Slow lo… Nyct… carni Prim… <NA>       11      NA     NA   \n## 5 Potto    Pero… omni  Prim… lc         11      NA     NA   \n## # … with 3 more variables: awake <dbl>, brainwt <dbl>,\n## #   bodywt <dbl>, and abbreviated variable names\n## #   ¹​conservation, ²​sleep_total, ³​sleep_rem, ⁴​sleep_cycle"},{"path":"data-wrangling.html","id":"selecting-columns","chapter":"5 Data Wrangling","heading":"5.3.2 Selecting Columns","text":"filter() operates rows, possible filter dataset include columns ’re interested . select columns dataset includes variables ’re interested , use select().Let’s start code just wrote include primates sleep lot. want include first column (name mammal) sleep information (included columns sleep_total, sleep_rem, sleep_cycle)?starting code just used, adding another pipe, using function select(). Within select(), specify columns want output.Now, using select() see still five rows filtered , four columns specified using select().can hopefully see power pipe operator chain together several commands row. Without pipe operator, full command look like :\n>\n> SEE!!! Definitely harder read. ’ll stick approach!","code":"\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_total, sleep_rem, sleep_cycle)## # A tibble: 5 × 4\n##   name         sleep_total sleep_rem sleep_cycle\n##   <chr>              <dbl>     <dbl>       <dbl>\n## 1 Owl monkey          17         1.8       NA   \n## 2 Patas monkey        10.9       1.1       NA   \n## 3 Macaque             10.1       1.2        0.75\n## 4 Slow loris          11        NA         NA   \n## 5 Potto               11        NA         NA\nselect(filter(msleep, order == \"Primates\", sleep_total > 10),\n    c(\"name\", \"sleep_total\", \"sleep_rem\", \"sleep_cycle\"))## # A tibble: 5 × 4\n##   name         sleep_total sleep_rem sleep_cycle\n##   <chr>              <dbl>     <dbl>       <dbl>\n## 1 Owl monkey          17         1.8       NA   \n## 2 Patas monkey        10.9       1.1       NA   \n## 3 Macaque             10.1       1.2        0.75\n## 4 Slow loris          11        NA         NA   \n## 5 Potto               11        NA         NA"},{"path":"data-wrangling.html","id":"renaming-columns","chapter":"5 Data Wrangling","heading":"5.4 Renaming Columns","text":"select() can also used rename columns. , use syntax: new_column_name = old_column_name within select. example, select columns rename total, rem cycle, use following syntax:’s important keep mind using select() rename columns, specified columns included renamed output. , instead, want change names columns return columns output, ’ll want use rename().example, following, returns data frame 11 columns, column names three columns specified within rename() function renamed.","code":"\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, total = sleep_total, rem = sleep_rem, cycle = sleep_cycle)## # A tibble: 5 × 4\n##   name         total   rem cycle\n##   <chr>        <dbl> <dbl> <dbl>\n## 1 Owl monkey    17     1.8 NA   \n## 2 Patas monkey  10.9   1.1 NA   \n## 3 Macaque       10.1   1.2  0.75\n## 4 Slow loris    11    NA   NA   \n## 5 Potto         11    NA   NA\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    rename(total = sleep_total, rem = sleep_rem, cycle = sleep_cycle)## # A tibble: 5 × 11\n##   name     genus vore  order conse…¹ total   rem cycle awake\n##   <chr>    <chr> <chr> <chr> <chr>   <dbl> <dbl> <dbl> <dbl>\n## 1 Owl mon… Aotus omni  Prim… <NA>     17     1.8 NA      7  \n## 2 Patas m… Eryt… omni  Prim… lc       10.9   1.1 NA     13.1\n## 3 Macaque  Maca… omni  Prim… <NA>     10.1   1.2  0.75  13.9\n## 4 Slow lo… Nyct… carni Prim… <NA>     11    NA   NA     13  \n## 5 Potto    Pero… omni  Prim… lc       11    NA   NA     13  \n## # … with 2 more variables: brainwt <dbl>, bodywt <dbl>, and\n## #   abbreviated variable name ¹​conservation"},{"path":"data-wrangling.html","id":"reordering","chapter":"5 Data Wrangling","heading":"5.5 Reordering","text":"addition filtering rows columns, often, ’ll want data arranged particular order. may order columns logical way, sort data data sorted value, .e Ascending Descending. can achieved simple functions.","code":""},{"path":"data-wrangling.html","id":"reordering-columns","chapter":"5 Data Wrangling","heading":"5.5.0.1 Reordering Columns","text":"select() function powerful. filter rename columns, can also used reorder columns. Using example , wanted sleep_rem first sleep column sleep_total last column, reorder within select(). output select() reordered match order specified within select().sleep_rem name displayed first followed sleep_rem, sleep_cycle, sleep_total, just specified within select().","code":"\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_rem, sleep_cycle, sleep_total)## # A tibble: 5 × 4\n##   name         sleep_rem sleep_cycle sleep_total\n##   <chr>            <dbl>       <dbl>       <dbl>\n## 1 Owl monkey         1.8       NA           17  \n## 2 Patas monkey       1.1       NA           10.9\n## 3 Macaque            1.2        0.75        10.1\n## 4 Slow loris        NA         NA           11  \n## 5 Potto             NA         NA           11"},{"path":"data-wrangling.html","id":"reordering-rows","chapter":"5 Data Wrangling","heading":"5.5.0.2 Reordering Rows","text":"Rows can also reordered. reorder variable ascending order , ’ll want use arrange(). Continuing example , now sort rows amount total sleep mammal gets, use following syntax:arrange sorts variables ascending order, ’s also possible sort descending order. just use desc() following syntax:putting sleep_total within desc(), arrange() now sort data primates longest total sleep shortest.arrange() can also used order non-numeric variables. example, arrange() sort character vectors alphabetically.like reorder rows based information multiple columns, can specify separated commas. useful repeated labels one column want sort within category based information another column.example , repeated primates, sort repeats based total sleep.","code":"\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_rem, sleep_cycle, sleep_total) %>%\n    arrange(sleep_total)## # A tibble: 5 × 4\n##   name         sleep_rem sleep_cycle sleep_total\n##   <chr>            <dbl>       <dbl>       <dbl>\n## 1 Macaque            1.2        0.75        10.1\n## 2 Patas monkey       1.1       NA           10.9\n## 3 Slow loris        NA         NA           11  \n## 4 Potto             NA         NA           11  \n## 5 Owl monkey         1.8       NA           17\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_rem, sleep_cycle, sleep_total) %>%\n    arrange(desc(sleep_total))## # A tibble: 5 × 4\n##   name         sleep_rem sleep_cycle sleep_total\n##   <chr>            <dbl>       <dbl>       <dbl>\n## 1 Owl monkey         1.8       NA           17  \n## 2 Slow loris        NA         NA           11  \n## 3 Potto             NA         NA           11  \n## 4 Patas monkey       1.1       NA           10.9\n## 5 Macaque            1.2        0.75        10.1\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_rem, sleep_cycle, sleep_total) %>%\n    arrange(name)## # A tibble: 5 × 4\n##   name         sleep_rem sleep_cycle sleep_total\n##   <chr>            <dbl>       <dbl>       <dbl>\n## 1 Macaque            1.2        0.75        10.1\n## 2 Owl monkey         1.8       NA           17  \n## 3 Patas monkey       1.1       NA           10.9\n## 4 Potto             NA         NA           11  \n## 5 Slow loris        NA         NA           11\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_rem, sleep_cycle, sleep_total) %>%\n    arrange(name, sleep_total)## # A tibble: 5 × 4\n##   name         sleep_rem sleep_cycle sleep_total\n##   <chr>            <dbl>       <dbl>       <dbl>\n## 1 Macaque            1.2        0.75        10.1\n## 2 Owl monkey         1.8       NA           17  \n## 3 Patas monkey       1.1       NA           10.9\n## 4 Potto             NA         NA           11  \n## 5 Slow loris        NA         NA           11"},{"path":"data-wrangling.html","id":"creating-new-columns","chapter":"5 Data Wrangling","heading":"5.6 Creating New Columns","text":"often find working data need additional column.example, two datasets wanted combine, may want make new column dataset called dataset. one dataset may put datasetA row. second dataset, put datasetB. way, combined data, able keep track dataset row came originally.often, however, ’ll likely want create new column calculates new variable based information column already . example, mammal sleep dataset, sleep_total hours. wanted information minutes? create new column information!function mutate() made new-column-creating situations. function lot capabilities. ’ll cover basics .Returning msleep dataset, filtering re-ordering, can create new column mutate(). Within mutate(), calculate number minutes mammal sleeps multiplying number hours animal sleeps 60 minutes.","code":"\nmsleep %>%\n    filter(order == \"Primates\", sleep_total > 10) %>%\n    select(name, sleep_rem, sleep_cycle, sleep_total) %>%\n    arrange(name) %>%\n    mutate(sleep_total_min = sleep_total * 60)## # A tibble: 5 × 5\n##   name         sleep_rem sleep_cycle sleep_total sleep_tot…¹\n##   <chr>            <dbl>       <dbl>       <dbl>       <dbl>\n## 1 Macaque            1.2        0.75        10.1         606\n## 2 Owl monkey         1.8       NA           17          1020\n## 3 Patas monkey       1.1       NA           10.9         654\n## 4 Potto             NA         NA           11           660\n## 5 Slow loris        NA         NA           11           660\n## # … with abbreviated variable name ¹​sleep_total_min"},{"path":"data-visualisation.html","id":"data-visualisation","chapter":"6 Data Visualisation","heading":"6 Data Visualisation","text":"","code":""},{"path":"statistics-in-r.html","id":"statistics-in-r","chapter":"7 Statistics in R","heading":"7 Statistics in R","text":"addition R’s powerful data manipulation graphics facilities, R includes host procedures can use analyse data. Many procedures included base installation R, however, even can installed packages available analyses described Chapter can carried without installing additional packages.","code":""},{"path":"statistics-in-r.html","id":"one-and-two-sample-tests","chapter":"7 Statistics in R","heading":"7.1 One and two sample tests","text":"two main functions types tests t.test() wilcox.test() perform t tests Wilcoxon’s signed rank test respectively. tests can applied one two sample analyses well paired data.example one sample t test use trees dataset included R. access -built dataset can use data() function. data set provides measurements diameter, height volume timber 31 felled black cherry trees (see ?trees detail).\nTable 7.1: Data summary\nVariable type: numericIf wanted test whether mean height black cherry trees sample equal 70 ft (mu = 70), assuming data normally distributed, can use t.test() .summary fairly logical layout includes name test asked (One Sample t-test), data used (data:  trees$Height), t statistic, degrees freedom associated p value (t = 5.2, df = 30, p-value = 1e-05). also states alternative hypothesis (alternative hypothesis: true mean equal 70) tells us two sided test (equal equal ), 95% confidence interval mean (95 percent confidence interval:73.66 78.34) also estimate mean (sample estimates: mean x : 76). example, p value small therefore reject null hypothesis conclude mean height sample black cherry trees equal 70 ft.function t.test() also number additional arguments can used one-sample tests. can specify one sided test required using either alternative = \"greater\" alternative = \"less arguments tests whether sample mean greater less mean specified. example, test whether sample mean greater 70 ft.can also change confidence level used estimating confidence intervals using argument conf.level = 0.99. specified way, 99% confidence intervals estimated.Although t tests fairly robust small departures normality may wish use rank based method Wilcoxon’s signed rank test. R, done almost exactly way t test using wilcox.test() function.Don’t worry much warning message, R just letting know sample contained number values therefore possible calculate exact p value. really problem small sample sizes. can also use arguments alternative = \"greater\" alternative = \"less\".one sample test ’s always good idea examine data departures normality, rather just assuming everything OK. Perhaps simplest way assess normality ‘quantile-quantile plot’. graph plots ranked sample quantiles distribution similar number ranked quantiles taken normal distribution. data normally distributed plot data points straight line. Departures normality show curve s-shape data points. Judging just much departure acceptable comes little bit practice.construct Q-Q plot need use qqnorm()qqline()functions. lty = 2 argument changes line dashed line.insist performing specific test normality can use function shapiro.test() performs Shapiro – Wilks test normality.example , p value = 0.4 suggests evidence reject null hypothesis can therefore assume data normally distributed.addition one-sample tests, t.test() wilcox.test() functions can used test differences two samples. two sample t test used test null hypothesis two samples come distributions mean (.e. means different). example, study conducted test whether ‘seeding’ clouds dimethylsulphate alters moisture content clouds. Ten random clouds ‘seeded’ ten ‘unseeded’. dataset can found atmosphere.txt data file located link data sets guide. click open data folderAs previous data frame (flowers), data long format. column moisture contains moisture content measured cloud column treatment identifies whether cloud seeded unseeded. perform two-sample t testNotice use formula method (atmos$moisture ~ atmos$treatment, can read ‘moisture described treatment’) specify test. can also use methods depending format data frame. Use ?t.test details. details output similar one-sample t test. Welch’s variant t test used default assume variances two samples equal. sure variances two samples , can specify using var.equal = TRUE argumentTo test whether assumption equal variances valid can perform F-test ratio group variances using var.test() function.p value greater 0.05, evidence suggest variances unequal. Note however, F-test sensitive departures normality used data normal. See car package alternatives.non-parametric two-sample Wilcoxon test (also known Mann-Whitney U test) can performed using formula method:can also use t.test() wilcox.test() functions test paired data. Paired data two measurements experimental unit (individual, site etc) essentially tests whether mean difference paired observations equal zero. example, pollution dataset gives biodiversity score aquatic invertebrates collected using kick samples 17 different rivers. data paired two samples taken river, one upstream paper mill one downstream.Note, case data wide format upstream downstream values separate columns (see previous topics convert long format want). conduct paired t test use paired = TRUE argument.output almost identical one-sample t test. also possible perform non-parametric matched-pairs Wilcoxon test wayThe function prop.test() can used compare two proportions. example, company wishes test effectiveness advertising campaign particular brand cat food. company commissions two polls, one advertising campaign one , poll asking cat owners whether buy brand cat food. results given table belowFrom table can conclude 56% cat owners buy cat food campaign compared 69% . , advertising campaign success?prop.test() function two main arguments given two vectors. first vector contains number positive outcomes second vector total numbers group. perform test first need define vectorsThere evidence support advertising campaign changed cat owners opinions cat food (p = 0.1). Use ?prop.test explore additional uses binomial proportions test.also analyse count data example Chi-square contingency table. simplest method convert tabulated table 2 x 2 matrix using matrix() function (note, many alternative methods constructing table like ).Notice enter data column wise matrix specify number rows using nrow =.can also change row names column names defaults make look like table (don’t really need perform Chi-square test)can perform Chi-square test test whether number cat owners buying cat food independent advertising campaign using chisq.test() function. example argument matrix counts.evidence (p = 0.107) suggest reject null hypothesis number cat owners buying cat food independent advertising campaign. may spotted 2x2 table, test exactly equivalent prop.test(). can also use chisq.test() function raw (untabulated) data test goodness fit (see ?chisq.test details).","code":"\n# install.packages('skimr') install.packages('gtExtras')\n# get the inbult data set of trees\ndata(trees)\n# get the general overview of the data using\nstr(trees)\n## 'data.frame':    31 obs. of  3 variables:\n##  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n##  $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n##  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\n# Or\nskimr::skim(trees)\n# generate a summary of the data using\nsummary(trees)\n##      Girth           Height       Volume     \n##  Min.   : 8.30   Min.   :63   Min.   :10.20  \n##  1st Qu.:11.05   1st Qu.:72   1st Qu.:19.40  \n##  Median :12.90   Median :76   Median :24.20  \n##  Mean   :13.25   Mean   :76   Mean   :30.17  \n##  3rd Qu.:15.25   3rd Qu.:80   3rd Qu.:37.30  \n##  Max.   :20.60   Max.   :87   Max.   :77.00\n# Or\ngtExtras::gt_plt_summary(trees)\nt.test(trees$Height, mu = 70)\n## \n##  One Sample t-test\n## \n## data:  trees$Height\n## t = 5.2429, df = 30, p-value = 1.173e-05\n## alternative hypothesis: true mean is not equal to 70\n## 95 percent confidence interval:\n##  73.6628 78.3372\n## sample estimates:\n## mean of x \n##        76\nt.test(trees$Height, mu = 70, alternative = \"greater\")\n## \n##  One Sample t-test\n## \n## data:  trees$Height\n## t = 5.2429, df = 30, p-value = 5.866e-06\n## alternative hypothesis: true mean is greater than 70\n## 95 percent confidence interval:\n##  74.05764      Inf\n## sample estimates:\n## mean of x \n##        76\nwilcox.test(trees$Height, mu = 70)\n## \n##  Wilcoxon signed rank test with continuity correction\n## \n## data:  trees$Height\n## V = 419.5, p-value = 0.0001229\n## alternative hypothesis: true location is not equal to 70\nqqnorm(trees$Height)\nqqline(trees$Height, lty = 2)\nshapiro.test(trees$Height)\n## \n##  Shapiro-Wilk normality test\n## \n## data:  trees$Height\n## W = 0.96545, p-value = 0.4034\natmos <- read.table(\"data/atmosphere.txt\", header = TRUE)\nstr(atmos)\n## 'data.frame':    20 obs. of  2 variables:\n##  $ moisture : num  301 302 299 316 307 ...\n##  $ treatment: chr  \"seeded\" \"seeded\" \"seeded\" \"seeded\" ...\nt.test(atmos$moisture ~ atmos$treatment)\n## \n##  Welch Two Sample t-test\n## \n## data:  atmos$moisture by atmos$treatment\n## t = 2.5404, df = 16.807, p-value = 0.02125\n## alternative hypothesis: true difference in means between group seeded and group unseeded is not equal to 0\n## 95 percent confidence interval:\n##   1.446433 15.693567\n## sample estimates:\n##   mean in group seeded mean in group unseeded \n##                 303.63                 295.06\nt.test(atmos$moisture ~ atmos$treatment, var.equal = TRUE)\n## \n##  Two Sample t-test\n## \n## data:  atmos$moisture by atmos$treatment\n## t = 2.5404, df = 18, p-value = 0.02051\n## alternative hypothesis: true difference in means between group seeded and group unseeded is not equal to 0\n## 95 percent confidence interval:\n##   1.482679 15.657321\n## sample estimates:\n##   mean in group seeded mean in group unseeded \n##                 303.63                 295.06\nvar.test(atmos$moisture ~ atmos$treatment)\n## \n##  F test to compare two variances\n## \n## data:  atmos$moisture by atmos$treatment\n## F = 0.57919, num df = 9, denom df = 9, p-value =\n## 0.4283\n## alternative hypothesis: true ratio of variances is not equal to 1\n## 95 percent confidence interval:\n##  0.1438623 2.3318107\n## sample estimates:\n## ratio of variances \n##          0.5791888\nwilcox.test(atmos$moisture ~ atmos$treatment)\n## \n##  Wilcoxon rank sum exact test\n## \n## data:  atmos$moisture by atmos$treatment\n## W = 79, p-value = 0.02881\n## alternative hypothesis: true location shift is not equal to 0\npollution <- read.table(\"data/pollution.txt\", header = TRUE)\nstr(pollution)\n## 'data.frame':    16 obs. of  2 variables:\n##  $ down: int  20 15 10 5 20 15 10 5 20 15 ...\n##  $ up  : int  23 16 10 4 22 15 12 7 21 16 ...\nt.test(pollution$down, pollution$up, paired = TRUE)\n## \n##  Paired t-test\n## \n## data:  pollution$down and pollution$up\n## t = -3.0502, df = 15, p-value = 0.0081\n## alternative hypothesis: true mean difference is not equal to 0\n## 95 percent confidence interval:\n##  -1.4864388 -0.2635612\n## sample estimates:\n## mean difference \n##          -0.875\nwilcox.test(pollution$down, pollution$up, paired = TRUE)\n## \n##  Wilcoxon signed rank test with continuity correction\n## \n## data:  pollution$down and pollution$up\n## V = 8, p-value = 0.01406\n## alternative hypothesis: true location shift is not equal to 0\nbuy <- c(45, 71)  # creates a vector of positive outcomes\ntotal <- c((45 + 35), (71 + 32))  # creates a vector of total numbers\nprop.test(buy, total)  # perform the test\n## \n##  2-sample test for equality of proportions with\n##  continuity correction\n## \n## data:  buy out of total\n## X-squared = 2.598, df = 1, p-value = 0.107\n## alternative hypothesis: two.sided\n## 95 percent confidence interval:\n##  -0.27865200  0.02501122\n## sample estimates:\n##    prop 1    prop 2 \n## 0.5625000 0.6893204\nbuyers <- matrix(c(45, 35, 71, 32), nrow = 2)\nbuyers\n##      [,1] [,2]\n## [1,]   45   71\n## [2,]   35   32\ncolnames(buyers) <- c(\"before\", \"after\")\nrownames(buyers) <- c(\"buy\", \"notbuy\")\nbuyers\n##        before after\n## buy        45    71\n## notbuy     35    32\nchisq.test(buyers)\n## \n##  Pearson's Chi-squared test with Yates' continuity\n##  correction\n## \n## data:  buyers\n## X-squared = 2.598, df = 1, p-value = 0.107"},{"path":"statistics-in-r.html","id":"correlation","chapter":"7 Statistics in R","heading":"7.2 Correlation","text":"R, Pearson’s product-moment correlation coefficient two continuous variables can estimated using cor() function. Using trees data set , can determine correlation coefficient association tree Height Volume.can produce matrix correlation coefficients variables data frameNote correlation coefficients identical half matrix. Also, aware , although matrix coefficients can useful, little commonsense used using cor() data frames numerous variables. good practice trawl types matrices hope finding large coefficients without priori reason remember correlation coefficient assumes associations linear.missing values variables trying correlate, cor() return error message (many functions R). either remove observations (careful ) tell R observation missing. useful argument can use cor() function use = \"complete.obs\".function cor() return correlation coefficient two variables, gives indication whether coefficient significantly different zero. need use function cor.test().Two non-parametric equivalents Pearson correlation available within cor.test() function; Spearman’s rank Kendall’s tau coefficient. use either simply include argument method = \"spearman\" method = \"kendall\" depending test wish use. example","code":"\ndata(trees)\nstr(trees)\n## 'data.frame':    31 obs. of  3 variables:\n##  $ Girth : num  8.3 8.6 8.8 10.5 10.7 10.8 11 11 11.1 11.2 ...\n##  $ Height: num  70 65 63 72 81 83 66 75 80 75 ...\n##  $ Volume: num  10.3 10.3 10.2 16.4 18.8 19.7 15.6 18.2 22.6 19.9 ...\ncor(trees$Height, trees$Volume)\n## [1] 0.5982497\ncor(trees)\n##            Girth    Height    Volume\n## Girth  1.0000000 0.5192801 0.9671194\n## Height 0.5192801 1.0000000 0.5982497\n## Volume 0.9671194 0.5982497 1.0000000\ncor(trees, use = \"complete.obs\")\n##            Girth    Height    Volume\n## Girth  1.0000000 0.5192801 0.9671194\n## Height 0.5192801 1.0000000 0.5982497\n## Volume 0.9671194 0.5982497 1.0000000\ncor.test(trees$Height, trees$Volume)\n## \n##  Pearson's product-moment correlation\n## \n## data:  trees$Height and trees$Volume\n## t = 4.0205, df = 29, p-value = 0.0003784\n## alternative hypothesis: true correlation is not equal to 0\n## 95 percent confidence interval:\n##  0.3095235 0.7859756\n## sample estimates:\n##       cor \n## 0.5982497\ncor.test(trees$Height, trees$Volume, method = \"spearman\")\n## \n##  Spearman's rank correlation rho\n## \n## data:  trees$Height and trees$Volume\n## S = 2089.6, p-value = 0.0006484\n## alternative hypothesis: true rho is not equal to 0\n## sample estimates:\n##       rho \n## 0.5787101"},{"path":"statistics-in-r.html","id":"simple_lm","chapter":"7 Statistics in R","heading":"7.3 Simple linear modelling","text":"Linear models one widely used models statistics data science. often thought simple models ’re flexible able model wide variety experimental survey designs. Many statistical approaches may used previously (linear regression, t-test, ANOVA, ANCOVA etc) can expressed linear model good news ’re probably already familiar linear models (albeit indirectly). also form foundation complicated modelling approaches relatively easy extended incorporate additional complexity. section ’ll learn fit simple linear models using R cover common applications. won’t go detail underlying linear modelling theory rather focus practicalities model fitting R code.main function fitting linear models R lm() function (short linear model!). lm() function many arguments important first argument specifies model want fit using model formula typically takes general form: response variable ~ explanatory variable(s) model formula simply read  ‘variation response variable modelled function (~) explanatory variable(s)’. response variable also commonly known ‘dependent variable’ explanatory variables sometimes referred ‘independent variables’ (less frequently ‘predictor variables’). also additional term model formula represents variation response variable explained explanatory variables don’t need specify using lm() function.mentioned , many statistical ‘tests’ might previously used can expressed linear model. example, wanted perform bivariate linear regression response variable (y) single continuous explanatory variable (x) model formula simply bey ~ xOn hand, wanted use ANOVA test whether group means response variable (y) different three level factor (x) model formula look likey ~ xOK, hang , look identical, gives? addition model formula, type linear model fit also determined type data explanatory variable(s) (.e. class data). explanatory variable continuous fit bivariate linear regression. explanatory variable factor (.e. categorical data) fit ANOVA type model.can also increase complexity linear model including additional explanatory variables model formula. example, wanted fit two-way ANOVA explanatory variables x z need factors separated + symboly ~ x + zIf wanted perform factorial ANOVA identify interaction explanatory variables separate explanatory variables : symbol whilst also including main effects model formulay ~ x + z + x:zor using equivalent shortcut notationy ~ x * zIt’s important get comfortable using model formula (’ve given briefest explanations ) using lm() function (functions) ’s remarkably easy specifiy model either nonsense isn’t model really wanted fit. summary table various linear model formula equivalent R code given .lm(Y ~ X1 * X2) orlm(Y ~ X1 + X2 + X1:X2)OK, time example. data file smoking.txt summarises results study investigating possible relationship mortality rate smoking across 25 occupational groups UK. variable occupational.group specifies different occupational groups studied, risk.group variable indicates relative risk lung disease various occupational groups smoking index average number cigarettes smoked day (relative number smoked across occupations). variable mortality index death rate lung cancer group (relative death rate across occupational groups). data set, response variable mortality potential explanatory variables smoking numeric risk.group three level factor. first thing import data file using read.table() function usual assign data object called smoke. can find link download data, click open data folderNext, let’s investigate relationship mortality smoking variables plotting scatter plot. can use either ggplot2 package base R graphics . ’ll use ggplot2 time old friend ggplot() function.plot suggest positive relationship smoking index mortality index.fit simple linear model data use lm() function include model formula mortality ~ smoking assign results object called smoke_lm.Notice used $ notation specify variables model formula, instead ’ve used data = smoke argument. Although $ notation work (.e. smoke$mortality ~ smoke$smoking) likely cause problems later avoided. fact, go far suggest function data = argument always use . know function data = argument? Just look associated help file.Perhaps somewhat confusingly (least first) appears nothing much happened, don’t automatically get voluminous output normally get statistical packages. fact, R , store output analysis known lm class object (called smoke_lm) able extract exactly want using functions. ’re brave, can examine structure smoke_lm model object using str() function.obtain summary analysis can use summary() function smoke_lm model object.shows everything need know parameter estimates (intercept slope), standard errors associated t statistics p values. estimate Intercept suggests relative smoking index 0 relative mortality rate -2.885! p value associated intercept tests null hypothesis intercept equal zero. p value large fail reject null hypothesis. smoking parameter estimate (1.0875) estimate slope suggests every unit increase average number cigarettes smoked day mortality risk index increases 1.0875. p value associated smoking parameter tests whether slope relationship equal zero (.e. relationship). p value small reject null hypothesis therefore slope different zero therefore significant relationship. summary table also includes important information coefficient determination (R2), adjusted R2 , F statistic, associated degrees freedom p value. information condensed form ANOVA table can see using anova() function.Now let’s fit another linear model, time use risk.group variable explanatory variable. Remember risk.group variable factor linear model equivalent ANOVA type analysis. testing null hypothesis difference mean mortality rate low, medium high groups. fit model exactly way ., can produce ANOVA table using anova() functionThe results presented ANOVA table suggest can reject null hypothesis (small p value) therefore mean mortality rate index different low, medium high risk groups.first linear model can also produce summary estimated parameters using summary() function.summary table Intercept set first level risk.group (high) occurs first alphabetically. Therefore, estimated mean mortality index high risk individuals 135. estimates risk.grouplow risk.groupmedium mean differences intercept (high group). mortality index low group 135 - 57.83 = 77.17 medium group 135 - 27.55 = 107.45. t values p values summary table associated testing specific hypotheses. p value associated intercept tests null hypothesis mean mortality index high group equal zero. honest particularly meaningful hypothesis test can reject anyway small p value. p value risk.grouplow parameter tests null hypothesis mean difference high low risk groups equal zero (.e. difference). reject null hypothesis conclude means different two groups. Similarly, p value risk.groupmedium tests null hypothesis mean difference high medium groups equal zero also reject.Don’t worry much find output summary() function little confusing. takes bit practice experience able make sense numbers. Remember though, complicated model , complicated interpretion . always remember, model can’t interpret worth fitting (time!).Another approach interpreting model output plot graph data add fitted model plot. Let’s go back first linear model fitted (smoke_lm). can add fitted line previous plot using ggplot2 package geom_smooth geom. can easily include standard errors specifying se = TRUE argument.can also R’s base graphics. Note though fitted line extends beyond data great practice. want prevent can generate predicted values model using predict() function within range data add values plot using lines() function (shown).sit back relax admire model (go write high impact paper supervisor/boss harassing ) work finished. ’s vitally important check underlying assumptions linear model. Two important assumption equal variances (homogeneity variance) normality residuals. check equal variances can construct graph residuals versus fitted values. can first extracting residuals fitted values model object using resid() fitted() functions.plot using ggplot base R graphics.takes little practice interpret types graph, looking pattern structure residuals. definitely don’t want see scatter increasing around zero line (red dashed line) fitted values get bigger (described looking like trumpet, wedge cheese even slice pizza) indicate unequal variances (heteroscedacity).check normality residuals can use old friend Q-Q plot using residuals stored smoke_res object created earlier.plot base graphics.Alternatively, can get R hard work using plot() function model object smoke_lm. tell R want plot four graphs plotting window RStudio using par(mfrow = c(2,2)). command splits plotting window 2 rows 2 columns.first two graphs (top left top right) residual versus fitted Q-Q plots produced . third graph (bottom left) first plotted different scale (absolute value square root standardised residuals) looking pattern structure data points. fourth graph (bottom right) gives indication whether observations large influence (Cook’s distance) regression coefficient estimates. Levearge identifies observations unusually large values explanatory variables.can also produce diagnostic plots using ggplot installing package ggfortify using autoplot() function.influential data points data points high leverage . like examine effect removing one points parameter estimates can use update() function. Let’s remove data point 2 (miners, mortality = 116 smoking = 137) store results new object called smoke_lm2. Note, demonstrate use update() function. think long hard removing data point(s) always report justify reasoning.numerous functions useful producing diagnostic plots. example, rstandard() rstudent() returns standardised studentised residuals. function dffits() expresses much observation influences associated fitted value function dfbetas() gives change estimated parameters observation excluded, relative standard error (intercept solid line slope dashed line example ). solid bold line graph represents Cook’s distance. Examples use functions given .","code":"\nsmoke <- read.table(\"data/smoking.txt\", header = TRUE, sep = \"\\t\",\n    stringsAsFactors = TRUE)\nstr(smoke, vec.len = 2)\n## 'data.frame':    25 obs. of  4 variables:\n##  $ occupational.group: Factor w/ 25 levels \"Administrators\",..: 9 14 2 11 10 ...\n##  $ risk.group        : Factor w/ 3 levels \"high\",\"low\",\"medium\": 2 1 1 3 1 ...\n##  $ smoking           : int  77 137 117 94 116 ...\n##  $ mortality         : int  84 116 123 128 155 ...\n# vec.len argument to limited number of ' first elements'\n# to display\nlibrary(ggplot2)\nggplot(mapping = aes(x = smoking, y = mortality), data = smoke) +\n    geom_point()\nsmoke_lm <- lm(mortality ~ smoking, data = smoke)\nstr(smoke_lm)\n## List of 12\n##  $ coefficients : Named num [1:2] -2.89 1.09\n##   ..- attr(*, \"names\")= chr [1:2] \"(Intercept)\" \"smoking\"\n##  $ residuals    : Named num [1:25] 3.15 -30.11 -1.36 28.66 31.73 ...\n##   ..- attr(*, \"names\")= chr [1:25] \"1\" \"2\" \"3\" \"4\" ...\n##  $ effects      : Named num [1:25] -545 -91.63 2.72 26.99 35.56 ...\n##   ..- attr(*, \"names\")= chr [1:25] \"(Intercept)\" \"smoking\" \"\" \"\" ...\n##  $ rank         : int 2\n##  $ fitted.values: Named num [1:25] 80.9 146.1 124.4 99.3 123.3 ...\n##   ..- attr(*, \"names\")= chr [1:25] \"1\" \"2\" \"3\" \"4\" ...\n##  $ assign       : int [1:2] 0 1\n##  $ qr           :List of 5\n##   ..$ qr   : num [1:25, 1:2] -5 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 ...\n##   .. ..- attr(*, \"dimnames\")=List of 2\n##   .. .. ..$ : chr [1:25] \"1\" \"2\" \"3\" \"4\" ...\n##   .. .. ..$ : chr [1:2] \"(Intercept)\" \"smoking\"\n##   .. ..- attr(*, \"assign\")= int [1:2] 0 1\n##   ..$ qraux: num [1:2] 1.2 1.46\n##   ..$ pivot: int [1:2] 1 2\n##   ..$ tol  : num 1e-07\n##   ..$ rank : int 2\n##   ..- attr(*, \"class\")= chr \"qr\"\n##  $ df.residual  : int 23\n##  $ xlevels      : Named list()\n##  $ call         : language lm(formula = mortality ~ smoking, data = smoke)\n##  $ terms        :Classes 'terms', 'formula'  language mortality ~ smoking\n##   .. ..- attr(*, \"variables\")= language list(mortality, smoking)\n##   .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n##   .. .. ..- attr(*, \"dimnames\")=List of 2\n##   .. .. .. ..$ : chr [1:2] \"mortality\" \"smoking\"\n##   .. .. .. ..$ : chr \"smoking\"\n##   .. ..- attr(*, \"term.labels\")= chr \"smoking\"\n##   .. ..- attr(*, \"order\")= int 1\n##   .. ..- attr(*, \"intercept\")= int 1\n##   .. ..- attr(*, \"response\")= int 1\n##   .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv> \n##   .. ..- attr(*, \"predvars\")= language list(mortality, smoking)\n##   .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n##   .. .. ..- attr(*, \"names\")= chr [1:2] \"mortality\" \"smoking\"\n##  $ model        :'data.frame':   25 obs. of  2 variables:\n##   ..$ mortality: int [1:25] 84 116 123 128 155 101 118 113 104 88 ...\n##   ..$ smoking  : int [1:25] 77 137 117 94 116 102 111 93 88 102 ...\n##   ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language mortality ~ smoking\n##   .. .. ..- attr(*, \"variables\")= language list(mortality, smoking)\n##   .. .. ..- attr(*, \"factors\")= int [1:2, 1] 0 1\n##   .. .. .. ..- attr(*, \"dimnames\")=List of 2\n##   .. .. .. .. ..$ : chr [1:2] \"mortality\" \"smoking\"\n##   .. .. .. .. ..$ : chr \"smoking\"\n##   .. .. ..- attr(*, \"term.labels\")= chr \"smoking\"\n##   .. .. ..- attr(*, \"order\")= int 1\n##   .. .. ..- attr(*, \"intercept\")= int 1\n##   .. .. ..- attr(*, \"response\")= int 1\n##   .. .. ..- attr(*, \".Environment\")=<environment: R_GlobalEnv> \n##   .. .. ..- attr(*, \"predvars\")= language list(mortality, smoking)\n##   .. .. ..- attr(*, \"dataClasses\")= Named chr [1:2] \"numeric\" \"numeric\"\n##   .. .. .. ..- attr(*, \"names\")= chr [1:2] \"mortality\" \"smoking\"\n##  - attr(*, \"class\")= chr \"lm\"\nsummary(smoke_lm)\n## \n## Call:\n## lm(formula = mortality ~ smoking, data = smoke)\n## \n## Residuals:\n##     Min      1Q  Median      3Q     Max \n## -30.107 -17.892   3.145  14.132  31.732 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)  -2.8853    23.0337  -0.125    0.901    \n## smoking       1.0875     0.2209   4.922 5.66e-05 ***\n## ---\n## Signif. codes:  \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 18.62 on 23 degrees of freedom\n## Multiple R-squared:  0.513,  Adjusted R-squared:  0.4918 \n## F-statistic: 24.23 on 1 and 23 DF,  p-value: 5.658e-05\nanova(smoke_lm)\n## Analysis of Variance Table\n## \n## Response: mortality\n##           Df Sum Sq Mean Sq F value    Pr(>F)    \n## smoking    1 8395.7  8395.7  24.228 5.658e-05 ***\n## Residuals 23 7970.3   346.5                      \n## ---\n## Signif. codes:  \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nsmoke_risk_lm <- lm(mortality ~ risk.group, data = smoke)\nanova(smoke_risk_lm)\n## Analysis of Variance Table\n## \n## Response: mortality\n##            Df  Sum Sq Mean Sq F value    Pr(>F)    \n## risk.group  2 11514.4  5757.2  26.107 1.554e-06 ***\n## Residuals  22  4851.6   220.5                      \n## ---\n## Signif. codes:  \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nsummary(smoke_risk_lm)\n## \n## Call:\n## lm(formula = mortality ~ risk.group, data = smoke)\n## \n## Residuals:\n##    Min     1Q Median     3Q    Max \n## -26.17 -11.45   4.00   9.00  26.83 \n## \n## Coefficients:\n##                  Estimate Std. Error t value Pr(>|t|)    \n## (Intercept)        135.00       5.25  25.713  < 2e-16 ***\n## risk.grouplow      -57.83       8.02  -7.211 3.16e-07 ***\n## risk.groupmedium   -27.55       6.90  -3.992 0.000615 ***\n## ---\n## Signif. codes:  \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 14.85 on 22 degrees of freedom\n## Multiple R-squared:  0.7036, Adjusted R-squared:  0.6766 \n## F-statistic: 26.11 on 2 and 22 DF,  p-value: 1.554e-06\nggplot(mapping = aes(x = smoking, y = mortality), data = smoke) +\n    geom_point() + geom_smooth(method = \"lm\", se = TRUE)\nplot(smoke$smoking, smoke$mortality, xlab = \"smoking rate\", ylab = \" mortality rate\")\nabline(smoke_lm, col = \"red\")\nsmoke_res <- resid(smoke_lm)\nsmoke_fit <- fitted(smoke_lm)\nggplot(mapping = aes(x = smoke_fit, y = smoke_res)) + geom_point() +\n    geom_hline(yintercept = 0, colour = \"red\", linetype = \"dashed\")\nggplot(mapping = aes(sample = smoke_res)) + stat_qq() + stat_qq_line()\nqqnorm(smoke_res)\nqqline(smoke_res)\npar(mfrow = c(2, 2))\nplot(smoke_lm)\nlibrary(ggfortify)\nautoplot(smoke_lm, which = 1:6, ncol = 2, label.size = 3)\nsmoke_lm2 <- update(smoke_lm, subset = -2)\nsummary(smoke_lm2)\n## \n## Call:\n## lm(formula = mortality ~ smoking, data = smoke, subset = -2)\n## \n## Residuals:\n##      Min       1Q   Median       3Q      Max \n## -29.7425 -11.6920  -0.4745  13.6141  28.7587 \n## \n## Coefficients:\n##             Estimate Std. Error t value Pr(>|t|)    \n## (Intercept) -20.0755    23.5798  -0.851    0.404    \n## smoking       1.2693     0.2297   5.526 1.49e-05 ***\n## ---\n## Signif. codes:  \n## 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n## \n## Residual standard error: 17.62 on 22 degrees of freedom\n## Multiple R-squared:  0.5813, Adjusted R-squared:  0.5622 \n## F-statistic: 30.54 on 1 and 22 DF,  p-value: 1.488e-05\npar(mfrow = c(2, 2))\nplot(dffits(smoke_lm), type = \"l\")\nplot(rstudent(smoke_lm))\nmatplot(dfbetas(smoke_lm), type = \"l\", col = \"black\")\nlines(sqrt(cooks.distance(smoke_lm)), lwd = 2)"},{"path":"statistics-in-r.html","id":"other-modelling-approaches","chapter":"7 Statistics in R","heading":"7.4 Other modelling approaches","text":"things R related, complete description variety flexibility different statistical analyses can perform beyond scope introductory guide. information can found excellent documents referred Additional Resources end guide cheat sheets.table common statistical functions given get started. ","code":""},{"path":"statistics-in-r.html","id":"task-6","chapter":"7 Statistics in R","heading":"7.5 Task 6","text":"Congratulations, ’ve reached end Chapter! Perhaps now’s good time practice ’ve learned","code":""},{"path":"functions.html","id":"functions","chapter":"8 Functions","heading":"8 Functions","text":"","code":""},{"path":"functions.html","id":"built-in-functions","chapter":"8 Functions","heading":"8.1 Built In Functions","text":"","code":""},{"path":"functions.html","id":"user-defined-functions","chapter":"8 Functions","heading":"8.2 User Defined Functions","text":"","code":""},{"path":"functions.html","id":"categories-of-user-defined-functions","chapter":"8 Functions","heading":"8.2.1 Categories of user Defined Functions","text":"","code":""},{"path":"functions.html","id":"function-definition","chapter":"8 Functions","heading":"8.2.2 Function Definition","text":"","code":""},{"path":"functions.html","id":"function-call","chapter":"8 Functions","heading":"8.3 Function Call","text":"","code":""},{"path":"functions.html","id":"exercise","chapter":"8 Functions","heading":"8.4 Exercise","text":"","code":""},{"path":"interactive-reporting-shiny-markdowm-quarto.html","id":"interactive-reporting-shiny-markdowm-quarto","chapter":"9 Interactive Reporting (Shiny, Markdowm, Quarto)","heading":"9 Interactive Reporting (Shiny, Markdowm, Quarto)","text":"","code":""},{"path":"github_r.html","id":"github_r","chapter":"10 Version control with Git and GitHub","heading":"10 Version control with Git and GitHub","text":"chapter, learn fundamentals using version control systems manage R code facilitate collaboration others. Specifically, chapter focus using Git software conjunction online hosting service GitHub. end chapter, able set Git GitHub computer, create work version controlled projects RStudio, gain basic understanding Git’s advanced features like branching, forking, pull requests.worth noting RStudio recommended interface Git due user-friendly graphical interface. However, RStudio’s menu system offers basic Git functionality, may necessary learn Git commands syntax make Git’s capabilities. Git can challenging use initially due terminology use jargon, chapter strives simplify process provide alternative methods, reverting previous document versions.Lastly, GitHub designed host large files, file size limitations consider. recommended host large files elsewhere, Google Drive Dropbox, link README file R markdown document GitHub.","code":""},{"path":"github_r.html","id":"what-is-version-control","chapter":"10 Version control with Git and GitHub","heading":"10.1 What is version control?","text":"Version Control System (VCS) maintains record changes made project files, allowing easy reversal previous versions case errors file loss. Although initially created collaborative software development, version control systems also valuable scientific research collaborations, terminology features oriented towards software development.Git popular free open-source version control system integrates well RStudio, making convenient addition one’s regular workflow minimal extra effort.","code":""},{"path":"github_r.html","id":"why-use-version-control","chapter":"10 Version control with Git and GitHub","heading":"10.2 Why use version control?","text":"worry version control? Well, first helps avoid (familiar?) situation ’re working project\nFigure 10.1: need version control\nusually arising (familiar?) scenarioVersion control automatically takes care keeping record versions particular file allows revert back previous versions need . Version control also helps (especially future ) keep track files single place helps others (especially collaborators) review, contribute reuse work GitHub website. Lastly, files always available anywhere computer, need internet connection.","code":""},{"path":"github_r.html","id":"what-is-git-and-github","chapter":"10 Version control with Git and GitHub","heading":"10.3 What is Git and GitHub?","text":"Git version control system originally developed Linus Torvalds lets track changes set files. files can type file including menagerie files typically make data orientated project (.pdf, .Rmd, .docx, .txt, .jpg etc) although plain text files work best. files make project called repository (just repo).GitHub web-based hosting service Git repositories allows create remote copy local version-controlled project. can used backup archive project make accessible colleagues can work collaboratively.start project typically (always) create remote repository GitHub, clone (think copying) repository local computer (one front ). cloning usually one time event shouldn’t need clone repository unless really muck things . cloned repository can work locally project usual, creating saving files data analysis (scripts, R markdown documents, figures etc).Along way can take snapshots (called commits) files ’ve made important changes.can push changes remote GitHub repository make backup make available collaborators. people working project (repository), maybe ’re working different computer, can pull changes back local repository everything synchronised.","code":""},{"path":"github_r.html","id":"setup_git","chapter":"10 Version control with Git and GitHub","heading":"10.4 Getting started","text":"Chapter assumes already installed latest versions R RStudio. haven’t done yet can find instructions first chapter","code":""},{"path":"github_r.html","id":"install-git","chapter":"10 Version control with Git and GitHub","heading":"10.4.1 Install Git","text":"get started, first need install Git. ’re lucky may already Git installed (especially Mac Linux computer). can check already Git installed clicking Terminal tab Console window RStudio typing git --version (space git command important). see something looks like git version 2.25.0 (version number may different computer) already Git installed (happy days). get error (something like git: command found) means don’t Git installed (yet!).can also check outside RStudio opening separate Terminal want. Windows go ‘Start menu’ search bar (run box) type cmd press enter. Mac go ‘Applications’ Finder, click ‘Utilities’ folder ‘Terminal’ program. Linux machine simply open Terminal (Ctrl+Alt+T often ).install Git Windows computer recommend download install Git Windows (also known ’Git Bash'). can find download file installation instructions .using Mac computer recommend download Git install usual way (double click installer package downloaded). ’ve previously installed Xcode Mac want use date version Git need follow steps documented [][git_xcode]. ’ve never heard Xcode don’t worry !lucky enough working Linux machine can simply use OS package manager install Git official repository. Ubuntu Linux (variants ) open Terminal typeYou need administrative privileges . versions Linux see installation instructions.Whatever version Git ’re installing, installation finished verify installation process successful running command git --version Terminal tab RStudio (described ). installations Git (yes ’re looking MS Windows) may still produce error also need setup RStudio can find Git executable (described ).","code":"sudo apt update\nsudo apt install git"},{"path":"github_r.html","id":"configure-git","chapter":"10 Version control with Git and GitHub","heading":"10.4.2 Configure Git","text":"installing Git, need configure can use . Click Terminal tab Console window type following:git config –global user.email ‘@youremail.com’git config –global user.name ‘Name’substituting 'Name' actual name '@youremail.com' email address. recommend use University email address (one) also use address register GitHub account (coming bit).successful, see error messages commands. verify successfully configured Git type following Terminalgit config –global –listYou see user.name user.email configured.","code":""},{"path":"github_r.html","id":"rs_config","chapter":"10 Version control with Git and GitHub","heading":"10.4.3 Configure RStudio","text":"can see , Git can used command line, also integrates well RStudio, providing friendly graphical user interface. want use RStudio’s Git integration (recommend - least start), need check path Git executable specified correctly. RStudio, go menu Tools -> Global Options -> Git/SVN make sure ‘Enable version control interface RStudio projects’ ticked ‘Git executable:’ path correct installation. ’s correct hit Browse... button navigate installed git click executable file. need restart RStudio .","code":""},{"path":"github_r.html","id":"register-a-github-account","chapter":"10 Version control with Git and GitHub","heading":"10.4.4 Register a GitHub account","text":"want keep track files file versions local computer Git sufficient. however, like make -site copy project make available collaborators need web-based hosting service Git repositories.GitHub comes play (also services like GitLab, Bitbucket, Apache ALlura, etc.can sign free account GitHub. need specify username, email address strong password. suggest use University email address (one) also allow apply free educator researcher account later gives useful benefits (don’t worry now though).comes choosing username suggest give thought. Choose short rather long username, use lowercase hyphenate want include multiple words, find way incorporating actual name lastly, choose username feel comfortable revealing future employer!Next click ‘Select plan’ (may solve simple puzzle first verify ’re human) choose ‘Free Plan’ option. Github send email email address supplied verify.’ve completed steps Git GitHub setup ready use (Finally!).","code":""},{"path":"github_r.html","id":"setting-up-a-project-in-rstudio","chapter":"10 Version control with Git and GitHub","heading":"10.5 Setting up a project in RStudio","text":"Now ’re set , let’s create first version controlled RStudio project.couple different approaches can use .can either setup remote GitHub repository first connect RStudio project repository (’ll call Option 1).can either setup remote GitHub repository first connect RStudio project repository (’ll call Option 1).Another option setup local repository first link remote GitHub repository repository (Option 2).Another option setup local repository first link remote GitHub repository repository (Option 2).can also connect existing project GitHub repository won’t cover .can also connect existing project GitHub repository won’t cover .suggest ’re completely new Git GitHub use Option 1 approach sets local Git repository nicely can push pull immediately. Option 2 requires little work therefore opportunities go wrong. cover options .","code":""},{"path":"github_r.html","id":"opt1","chapter":"10 Version control with Git and GitHub","heading":"10.5.1 Option 1 - GitHub first","text":"use GitHub first approach first need create repository (repo) GitHub. Go sign . Click ‘Repositories’ tab top green ‘New’ button rightGive new repo name (let’s call first_repo Chapter), select ‘Public’, tick ‘Initialize repository README’ (important) click ‘Create repository’ (ignore options now).new GitHub repository now created. Notice README rendered GitHub markdown (.md) format (see chapter R markdown guide doesn’t mean anything ). Next click green ‘Clone Download’ button copy https//... URL pops later (either highlight copy click copy clipboard icon right).Ok, now switch attention RStudio. RStudio click File -> New Project menu. pop window select Version Control.Now paste URL previously copied GitHub Repository URL: box. automatically fill Project Directory Name: section correct repository name (’s important name directory name repository created GitHub). can select want create directory clicking Browse button opposite Create project subdirectory : option. Navigate want directory created click OK. also tick Open new session option.RStudio now create new directory name repository local computer clone remote repository directory. directory contain three new files; first_repo.Rproj (whatever called repository), README.md .gitignore. can check Files tab usually bottom right pane RStudio. also Git tab top right pane two files listed (come later Chapter). ’s Option 1, now remote GitHub repository set linked local repository managed RStudio. changes make files directory version controlled Git.","code":""},{"path":"github_r.html","id":"opt2","chapter":"10 Version control with Git and GitHub","heading":"10.5.2 Option 2 - RStudio first","text":"alternative approach create local RStudio project first link remote Github repository. mentioned , option involved Option 1 feel free skip now come back later ’re interested. option also useful just want create local RStudio project linked local Git repository (.e. GitHub involved). want just follow instructions omitting GitHub bit.RStudio click File -> New Project menu select New Directory option.pop window select New Project optionIn New Project window specify Directory name (choose second_repo Chapter) select like create directory computer (click Browse button). Make sure Create git repository option tickedThis create version controlled directory called second_repo computer contains two files, second_repo.Rproj .gitignore (might also .Rhistory file ignore ). can check looking Files tab RStudio (usually bottom right pane).OK, go create repository GitHub need one thing - need place second_repo.Rproj .gitignorefiles version control. Unfortunately haven’t covered detail yet just follow next instructions (blindly!) ’ll revisit Using Git section Chapter.get two files version control click ‘Git’ tab usually top tight pane RStudioYou can see files listed. Next, tick boxes ‘Staged’ column files click ‘Commit’ button.take ‘Review Changes’ window. Type commit message ‘First commit’ ‘Commit message’ window click ‘Commit’ button. new window appear messages can ignore now. Click ‘Close’ close window also close ‘Review Changes’ window. two files now disappeared Git pane RStudio indicating successful commit.OK, ’s two files now version control. Now need create new repository GitHub. browser go [GitHub page][github] sign necessary. Click ‘Repositories’ tab click green ‘New’ button right. Give new repo name second_repo (version controlled directory name) select ‘Public’. time tick ‘Initialize repository README’ (important) click ‘Create repository’.take Quick setup page provides code various situations. code interested code ...push existing repository command line heading.Highlight copy first line code (note: slightly different include GitHub username mine)git remote add origin https://github.com/alexd106/second_repo.gitSwitch RStudio, click ‘Terminal’ tab paste command Terminal. Now go back GitHub copy second line codegit push -u origin masterand paste Terminal RStudio. see something like thisIf take look repo back GitHub (click /second_repo link top) see second_repo.Rproj .gitignore files now pushed GitHub local repository.last thing need create add README file repository. README file describes project written using RMarkdown language. good README file makes easy others (future !) use code reproduce project. can create README file RStudio GitHub. Let’s use second option.repository GitHub click green Add README button.Now write short description project <> Edit new file section click green Commit new file button.now see README.md file listed repository. won’t actually exist computer yet need pull changes back local repository, next section.Whether followed Option 1 Option 2 () now successfully setup version controlled RStudio project (associated directory) linked GitHub repository. Git now monitor directory changes make files also add delete files. steps seem like bit ordeal, just remember, need project gets much easier time.","code":""},{"path":"github_r.html","id":"use_git","chapter":"10 Version control with Git and GitHub","heading":"10.6 Using Git","text":"Now project repositories (local remote) set , ’s finally time learn use Git RStudio!Typically, using Git workflow go something like :create/delete edit files project directory computer usual (saving changes go)create/delete edit files project directory computer usual (saving changes go)’ve reached natural ‘break point’ progress (.e. ’d sad lost progress) stage filesOnce ’ve reached natural ‘break point’ progress (.e. ’d sad lost progress) stage filesYou commit changes made staged files (along useful commit message) creates permanent snapshot changesYou commit changes made staged files (along useful commit message) creates permanent snapshot changesYou keep cycle get point like push changes GitHubYou keep cycle get point like push changes GitHubIf ’re working people project may also need pull changes local computerIf ’re working people project may also need pull changes local computerOK, let’s go example help clarify workflow. RStudio open first_repo.Rproj created previously Option 1. Either use File -> Open Project menu click top right project icon select appropriate project.Create R markdown document inside project clicking File -> New File -> R markdown menu (r markdown chapter head).created, can delete example R markdown code (except YAML header) usual write interesting R markdown text include plot. ’ll use inbuilt cars dataset . Save file (cmd + s Mac ctrl + s Windows). R markdown document look something like following (doesn’t matter ’s exactly ).Take look ‘Git’ tab list new R markdown document (first_doc.Rmd example) along first_repo.Rproj, .gitignore (created files previously following Option 1).Following workflow, now need stage files. tick boxes ‘Staged’ column files. Notice status icon next box gives indication files changed. case files added (capital ) just created .staged files next step commit files. done clicking ‘Commit’ button.clicking ‘Commit’ button taken ‘Review Changes’ window. see three files staged previous step left pane. click file name first_doc.Rmd see changes made file highlighted bottom pane. content added highlighted green deleted content highlighted red.just created file, content highlighted green. commit files (take snapshot) first enter mandatory commit message ‘Commit message’ box. message relatively short informative (collaborators) indicate made changes, changed. makes sense Git keeps track changed best use commit messages purpose. ’s traditional enter message ‘First commit’ (‘Initial commit’) commit files first time. Now click ‘Commit’ button commit changes.summary commit just performed shown. Now click ‘Close’ button return ‘Review Changes’ window. Note staged files now removed.Now committed changes next step push changes GitHub. push changes ’s good practice first pull changes GitHub. especially important collaborators working files keeps local copy date avoids potential conflicts. case repository already date ’s good habit get . , click ‘Pull’ button top right ‘Review Changes’ window. pulled changes click green ‘Push’ button push changes. see summary push just performed. Hit ‘Close’ button close ‘Review Changes’ window.confirm changes made project pushed GitHub, open GitHub page, click Repositories link click first_repo repository. see four files listed including first_doc.Rmd just pushed. Along side file name see last commit message (‘First commit’ case) made last commit.see contents file click first_doc.Rmd file name.","code":""},{"path":"github_r.html","id":"tracking-changes","chapter":"10 Version control with Git and GitHub","heading":"10.6.1 Tracking changes","text":"following steps outlined , successfully modified RStudio project creating new R markdown document, staged committed changes finally pushed changes GitHub repository.Now let’s make changes R markdown file follow workflow time ’ll take look identify changes made files, examine commit history restore previous version document.RStudio open first_repo.Rproj file created previously (already open) open first_doc.Rmd file (click file name Files tab RStudio).Let’s make changes document. Delete line beginning ‘first version controlled …’ replace something informative (see figure ). also change plotted symbols red give plot axes labels. Lastly, let’s add summary table dataframe using kable() summary() functions (may need install knitr package haven’t done previously use kable() function) finally render document pdf changing YAML option tooutput: pdf_document.Now save changes click knit button render pdf. new pdf file named first_doc.pdf created can view clicking file name Files tab RStudio.Notice two files added Git tab RStudio. status icons indicate first_doc.Rmd file modified (capital M) first_doc.pdf file currently untracked (question mark).stage files tick ‘Staged’ box file click ‘Commit’ button take ‘Review Changes’ windowBefore commit changes notice status first_doc.pdf changed untracked added (). can view changes made first_doc.Rmd clicking file name top left pane provide useful summary changes bottom pane (technically called diffs). Lines deleted highlighted red lines added highlighted green (note Git’s point view, modification line actually two operations: removal original line followed creation new line). ’re happy, commit changes writing suitable commit message click ‘Commit’ button.push changes GitHub, click ‘Pull’ button first (remember good practice even though collaborating moment) click ‘Push’ button. Go online GitHub repository see new commits, including first_doc.pdf file created rendered R markdown document.view changes first_doc.Rmd click file name file.","code":""},{"path":"github_r.html","id":"commit-history","chapter":"10 Version control with Git and GitHub","heading":"10.6.2 Commit history","text":"One great things Git GitHub can view history commits made along associated commit messages. can locally using RStudio (Git command line) pushed commits GitHub can check GitHub website.view commit history RStudio click ‘History’ button (one looks like clock) Git pane bring history view ‘Review Changes’ window. can also click ‘Commit’ ‘Diff’ buttons takes window (just need additionally click ‘History’ button ‘Review Changes’ window).history window split two parts. top pane lists every commit made repository (associated commit messages) starting recent one top oldest bottom. can click commits bottom pane shows changes made along summary Date commit made, Author commit commit message (Subject). also unique identifier commit (SHA - Secure Hash Algorithm) Parent SHA identifies previous commit. SHA identifiers really important can use view revert previous versions files (details ). can also view contents file clicking ‘View file @ SHA key` link (case ’View file @ 2b4693d1’).can also view commit history GitHub website limited commits already pushed GitHub. view commit history navigate repository click ‘commits’ link (case link labelled ‘3 commits’ made 3 commits).see list commits made, along commit messages, date commit SHA identifier (SHA identifiers saw RStudio history). can even browse repository particular point time clicking <> link. view changes files associated commit simply click relevant commit link list.display changes using usual format green additions red deletions.","code":""},{"path":"github_r.html","id":"undo","chapter":"10 Version control with Git and GitHub","heading":"10.6.3 Reverting changes","text":"One great things using Git able revert previous versions files ’ve made mistake, broke something just prefer earlier approach. depend whether changes want discard staged, committed pushed GitHub. ’ll go common scenarios mostly using RStudio occasionally need resort using Terminal (still RStudio though).","code":""},{"path":"github_r.html","id":"changes-saved-but-not-staged-committed-or-pushed","chapter":"10 Version control with Git and GitHub","heading":"Changes saved but not staged, committed or pushed","text":"saved changes file(s) staged, committed pushed files GitHub can right click offending file Git pane select ‘Revert …’. roll back changes made state last commit. Just aware undo operation use caution.can also undo changes just part file opening ‘Diff’ window (click ‘Diff’ button Git pane). Select line wish discard double clicking line click ‘Discard line’ button. similar fashion can discard chunks code clicking ‘Discard chunk’ button.","code":""},{"path":"github_r.html","id":"staged-but-not-committed-and-not-pushed","chapter":"10 Version control with Git and GitHub","heading":"Staged but not committed and not pushed","text":"staged files, committed simply unstage clicking ‘Staged’ check box Git pane (‘Review Changes’ window) remove tick. can revert parts file described section .","code":""},{"path":"github_r.html","id":"staged-and-committed-but-not-pushed","chapter":"10 Version control with Git and GitHub","heading":"Staged and committed but not pushed","text":"made mistake forgotten include file last commit yet pushed GitHub, can just fix mistake, save changes, amend previous commit. can staging file tick ‘Amend previous commit` box ’Review Changes’ window committing.check commit history can see latest commit contains changes file rather two separate commits. use amend commit approach alot ’s important understand already pushed last commit GitHub effectively rewriting history sorts bad things may happen!spot mistake happened multiple commits back just want revert previous version document number options.Option 1 - (probably easiest unGit - like, whatever!) look commit history RStudio, find commit like go back click ‘View file @’ button show file contents.can copy contents file clipboard paste current file replace duff code text. Alternatively, can click ‘Save ’ button save file different file name. saved new file can delete current unwanted file carry working new file. Don’t forget stage commit new file.Option 2 - (Git like) Go Git history, find commit like roll back write (copy) SHA identifier.Now go Terminal RStudio type git checkout <SHA> <filename>. case SHA key 2b4693d1 filename first_doc.Rmd command look like :git checkout 2b4693d1 first_doc.RmdThe command copy selected file version past place present. RStudio may ask whether want reload file now changed - select yes. also need stage commit file usual.want revert files state previous commit rather just one file can use (single ‘dot’ . important otherwise HEAD detach!):git rm -r .\ngit checkout 2b4693d1 .Note delete files created since made commit careful!","code":""},{"path":"github_r.html","id":"staged-committed-and-pushed","chapter":"10 Version control with Git and GitHub","heading":"Staged, committed and pushed","text":"already pushed commits GitHub can use git checkout strategy described commit push update GitHub (although really considered ‘best’ practice). Another approach use git revert (Note: far can tell git revert ‘Revert’ option RStudio). revert command Git essentially creates new commit based previous commit therefore preserves commit history. rollback previous state (commit) first need identify SHA commit wish go back () use revert command Terminal. Let’s say want revert back ‘First commit’ SHA identifier d27e79f1.can use revert command shown Terminal. ---commit option used prevent us deal intermediate commit.git revert –-commit d27e79f1..HEADYour first_doc.Rmd file now revert back state ‘First commit’. Notice also first_doc.pdf file deleted wasn’t present made first commit. can now stage commit files new commit message finally push GitHub. Notice look commit history commits made still present.repo GitHub also reflects changes","code":""},{"path":"github_r.html","id":"collab","chapter":"10 Version control with Git and GitHub","heading":"10.6.4 Collaborate with Git","text":"GitHub great tool collaboration, can seem scary complicated first, worth investing time learn works. makes GitHub good collaboration distributed system, means every collaborator works copy project changes merged together remote repository. two main ways can set collaborative project GitHub. One workflow went , everybody connects local repository remote one; system works well small projects different people mainly work different aspects project can quickly become unwieldy many people collaborating working files (merge misery!). second approach consists every collaborator creating copy (fork) main repository, becomes remote repository. Every collaborator needs send request (pull request) owner main repository incorporate changes main repository includes review process changes integrated. detail topics can found resources section.","code":""},{"path":"github_r.html","id":"git-tips","chapter":"10 Version control with Git and GitHub","heading":"10.6.5 Git tips","text":"Generally speaking commit often (including amended commits) push much less often. makes collaboration easier also makes process reverting previous versions documents much straight forward. generally push changes GitHub ’re happy collaborators (rest world) see work. However, entirely depends project (working ) priorities using Git.don’t want track file repository (maybe large transient files) can get Git ignore file right clicking filename Git pane selecting ‘Ignore…’add filename .gitignore file. want ignore multiple files particular type file can also include wildcards .gitignore file. example ignore png files can include expression *.png .gitignore file save.goes pear shaped end completely trashing Git repository don’t despair (’ve !). long GitHub repository good, need delete offending project directory computer, create new RStudio project link remote GitHub repository using Option 2. cloned remote repository good go.","code":""},{"path":"github_r.html","id":"resources","chapter":"10 Version control with Git and GitHub","heading":"10.7 Further resources","text":"many good online guides learn git GitHub open source software huge community can great resource:British Ecological Society guide Reproducible CodeThe British Ecological Society guide Reproducible CodeThe GitHub guideThe GitHub guideThe Mozilla Science Lab, GitHub Collaboration Open Projects guideThe Mozilla Science Lab, GitHub Collaboration Open Projects guideAnd many others, need Google “version control git GitHub” see huge community around open source projects.many others, need Google “version control git GitHub” see huge community around open source projects.","code":""},{"path":"survey-sampling.html","id":"survey-sampling","chapter":"11 Survey Sampling","heading":"11 Survey Sampling","text":"","code":""},{"path":"text-mining-for-qualitative-analysis.html","id":"text-mining-for-qualitative-analysis","chapter":"12 Text Mining for Qualitative Analysis","heading":"12 Text Mining for Qualitative Analysis","text":"","code":""},{"path":"machine-learning.html","id":"machine-learning","chapter":"13 Machine Learning","heading":"13 Machine Learning","text":"","code":""},{"path":"additional-resources.html","id":"additional-resources","chapter":"Additional Resources","heading":"Additional Resources","text":"","code":""}]
